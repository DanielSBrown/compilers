
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Dec 09 13:08:18 EST 2017
//----------------------------------------------------

package mjparser;

import java_cup.runtime.*;
import java.util.*;
import java.io.PrintWriter;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileNotFoundException;
import ast.node.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Dec 09 13:08:18 EST 2017
  */
public class mj extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public mj() {super();}

  /** Constructor which sets the default scanner. */
  public mj(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public mj(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\110\000\002\002\004\000\002\022\003\000\002\023" +
    "\005\000\002\024\004\000\002\024\002\000\002\002\007" +
    "\000\002\030\002\000\002\006\024\000\002\017\004\000" +
    "\002\017\002\000\002\012\010\000\002\012\006\000\002" +
    "\025\005\000\002\025\002\000\002\010\015\000\002\016" +
    "\003\000\002\016\005\000\002\016\002\000\002\015\004" +
    "\000\002\014\003\000\002\014\004\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\007\005\000\002\007\013\000\002\007\007" +
    "\000\002\007\011\000\002\007\007\000\002\007\002\000" +
    "\002\004\005\000\002\004\013\000\002\004\011\000\002" +
    "\004\007\000\002\004\007\000\002\004\011\000\002\004" +
    "\007\000\002\004\006\000\002\004\004\000\002\026\010" +
    "\000\002\027\005\000\002\027\003\000\002\027\002\000" +
    "\002\003\005\000\002\003\005\000\002\003\006\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\006\000\002\003\004\000\002\003\010" +
    "\000\002\003\006\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\004\000\002\003\005\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\005\004" +
    "\000\002\005\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\306\000\004\017\005\001\002\000\004\002\310\001" +
    "\002\000\004\046\006\001\002\000\004\044\007\001\002" +
    "\000\004\037\010\001\002\000\004\061\015\001\002\000" +
    "\006\002\ufff8\037\014\001\002\000\006\002\ufff8\037\014" +
    "\001\002\000\004\002\ufffc\001\002\000\004\061\015\001" +
    "\002\000\036\004\000\005\000\006\000\007\000\010\000" +
    "\011\000\022\000\023\000\024\000\027\000\030\000\044" +
    "\000\045\000\061\000\001\002\000\004\011\017\001\002" +
    "\000\026\012\020\013\ufffd\014\ufffd\015\ufffd\032\ufffd\036" +
    "\ufffd\047\ufffd\050\ufffd\051\ufffd\061\ufffd\001\002\000\006" +
    "\002\ufff6\037\ufff6\001\002\000\024\013\026\014\022\015" +
    "\036\032\024\036\027\047\034\050\033\051\031\061\015" +
    "\001\002\000\004\061\uffea\001\002\000\006\012\264\032" +
    "\024\001\002\000\022\013\026\014\022\015\036\036\027" +
    "\047\034\050\033\051\031\061\015\001\002\000\076\005" +
    "\ufffe\007\ufffe\011\ufffe\012\ufffe\013\ufffe\014\ufffe\015\ufffe" +
    "\020\ufffe\025\ufffe\026\ufffe\031\ufffe\032\ufffe\033\ufffe\036" +
    "\ufffe\047\ufffe\050\ufffe\051\ufffe\052\ufffe\054\ufffe\055\ufffe" +
    "\056\ufffe\057\ufffe\060\ufffe\061\ufffe\062\ufffe\063\ufffe\064" +
    "\ufffe\065\ufffe\066\ufffe\067\ufffe\001\002\000\004\061\uffec" +
    "\001\002\000\004\061\uffe9\001\002\000\006\012\uffee\032" +
    "\uffee\001\002\000\004\061\uffe6\001\002\000\004\061\uffe5" +
    "\001\002\000\004\061\uffe7\001\002\000\004\061\uffe8\001" +
    "\002\000\004\061\015\001\002\000\004\061\uffeb\001\002" +
    "\000\004\044\040\001\002\000\076\005\uffff\007\uffff\011" +
    "\uffff\012\uffff\013\uffff\014\uffff\015\uffff\020\uffff\025\uffff" +
    "\026\uffff\031\uffff\032\uffff\033\uffff\036\uffff\047\uffff\050" +
    "\uffff\051\uffff\052\uffff\054\uffff\055\uffff\056\uffff\057\uffff" +
    "\060\uffff\061\uffff\062\uffff\063\uffff\064\uffff\065\uffff\066" +
    "\uffff\067\uffff\001\002\000\004\061\015\001\002\000\004" +
    "\007\043\001\002\000\026\010\ufff0\013\026\014\022\015" +
    "\036\027\ufff0\036\027\047\034\050\033\051\031\061\015" +
    "\001\002\000\006\010\051\027\050\001\002\000\006\010" +
    "\ufff2\027\ufff2\001\002\000\004\061\015\001\002\000\006" +
    "\010\uffef\027\uffef\001\002\000\022\013\026\014\022\015" +
    "\036\036\027\047\034\050\033\051\031\061\015\001\002" +
    "\000\004\011\052\001\002\000\074\005\ufffd\007\ufffd\011" +
    "\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd\020\ufffd\025\ufffd" +
    "\026\ufffd\031\ufffd\033\ufffd\036\ufffd\047\ufffd\050\ufffd\051" +
    "\ufffd\052\ufffd\054\ufffd\055\ufffd\056\ufffd\057\ufffd\060\ufffd" +
    "\061\ufffd\062\ufffd\063\ufffd\064\ufffd\065\ufffd\066\ufffd\067" +
    "\ufffd\001\002\000\074\005\077\007\067\011\066\012\uffba" +
    "\013\026\014\022\015\036\020\064\025\060\026\057\031" +
    "\101\033\uffba\036\027\047\034\050\033\051\031\052\072" +
    "\054\054\055\102\056\103\057\075\060\071\061\015\062" +
    "\062\063\076\064\074\065\100\066\065\067\070\001\002" +
    "\000\004\007\255\001\002\000\056\005\077\007\067\011" +
    "\066\012\uffba\020\064\025\060\026\057\031\101\033\uffba" +
    "\052\072\054\054\055\102\056\103\057\075\060\071\061" +
    "\015\062\062\063\076\064\074\065\100\066\065\067\070" +
    "\001\002\000\024\004\uffbe\005\uffbe\006\uffbe\022\uffbe\023" +
    "\uffbe\024\uffbe\030\uffbe\045\177\061\uffe5\001\002\000\004" +
    "\007\251\001\002\000\036\005\077\007\067\025\060\031" +
    "\101\056\103\057\075\060\071\061\015\062\062\063\076" +
    "\064\074\065\100\066\065\067\070\001\002\000\022\004" +
    "\uffbc\005\uffbc\006\uffbc\022\uffbc\023\uffbc\024\uffbc\030\uffbc" +
    "\044\247\001\002\000\026\004\uffc3\005\uffc3\006\uffc3\010" +
    "\uffc3\022\uffc3\023\uffc3\024\uffc3\027\uffc3\030\uffc3\044\uffc3" +
    "\001\002\000\020\004\113\005\115\006\116\022\111\023" +
    "\114\024\112\030\117\001\002\000\004\007\202\001\002" +
    "\000\026\004\uffc1\005\uffc1\006\uffc1\010\uffc1\022\uffc1\023" +
    "\uffc1\024\uffc1\027\uffc1\030\uffc1\044\uffc1\001\002\000\054" +
    "\005\077\007\067\011\066\012\uffba\020\064\025\060\026" +
    "\057\031\101\052\072\054\054\055\102\056\103\057\075" +
    "\060\071\061\015\062\062\063\076\064\074\065\100\066" +
    "\065\067\070\001\002\000\040\005\077\007\067\015\167" +
    "\025\060\031\101\056\103\057\075\060\071\061\015\062" +
    "\062\063\076\064\074\065\100\066\065\067\070\001\002" +
    "\000\026\004\uffbd\005\uffbd\006\uffbd\010\uffbd\022\uffbd\023" +
    "\uffbd\024\uffbd\027\uffbd\030\uffbd\044\uffbd\001\002\000\026" +
    "\004\uffc6\005\uffc6\006\uffc6\010\uffc6\022\uffc6\023\uffc6\024" +
    "\uffc6\027\uffc6\030\uffc6\044\uffc6\001\002\000\004\007\157" +
    "\001\002\000\006\012\ufff4\033\152\001\002\000\026\004" +
    "\uffc5\005\uffc5\006\uffc5\010\uffc5\022\uffc5\023\uffc5\024\uffc5" +
    "\027\uffc5\030\uffc5\044\uffc5\001\002\000\004\007\147\001" +
    "\002\000\026\004\uffc2\005\uffc2\006\uffc2\010\uffc2\022\uffc2" +
    "\023\uffc2\024\uffc2\027\uffc2\030\uffc2\044\uffc2\001\002\000" +
    "\036\005\077\007\067\025\060\031\101\056\103\057\075" +
    "\060\071\061\015\062\062\063\076\064\074\065\100\066" +
    "\065\067\070\001\002\000\026\004\uffc4\005\uffc4\006\uffc4" +
    "\010\uffc4\022\uffc4\023\uffc4\024\uffc4\027\uffc4\030\uffc4\044" +
    "\uffc4\001\002\000\004\061\015\001\002\000\004\007\137" +
    "\001\002\000\004\007\104\001\002\000\036\005\077\007" +
    "\067\025\060\031\101\056\103\057\075\060\071\061\015" +
    "\062\062\063\076\064\074\065\100\066\065\067\070\001" +
    "\002\000\022\004\113\005\115\006\116\022\111\023\114" +
    "\024\112\027\110\030\117\001\002\000\026\004\uffbc\005" +
    "\uffbc\006\uffbc\010\uffbc\022\uffbc\023\uffbc\024\uffbc\027\uffbc" +
    "\030\uffbc\044\uffbc\001\002\000\026\004\uffbe\005\uffbe\006" +
    "\uffbe\010\uffbe\022\uffbe\023\uffbe\024\uffbe\027\uffbe\030\uffbe" +
    "\044\uffbe\001\002\000\036\005\077\007\067\025\060\031" +
    "\101\056\103\057\075\060\071\061\015\062\062\063\076" +
    "\064\074\065\100\066\065\067\070\001\002\000\036\005" +
    "\077\007\067\025\060\031\101\056\103\057\075\060\071" +
    "\061\015\062\062\063\076\064\074\065\100\066\065\067" +
    "\070\001\002\000\036\005\077\007\067\025\060\031\101" +
    "\056\103\057\075\060\071\061\015\062\062\063\076\064" +
    "\074\065\100\066\065\067\070\001\002\000\036\005\077" +
    "\007\067\025\060\031\101\056\103\057\075\060\071\061" +
    "\015\062\062\063\076\064\074\065\100\066\065\067\070" +
    "\001\002\000\036\005\077\007\067\025\060\031\101\056" +
    "\103\057\075\060\071\061\015\062\062\063\076\064\074" +
    "\065\100\066\065\067\070\001\002\000\036\005\077\007" +
    "\067\025\060\031\101\056\103\057\075\060\071\061\015" +
    "\062\062\063\076\064\074\065\100\066\065\067\070\001" +
    "\002\000\036\005\077\007\067\025\060\031\101\056\103" +
    "\057\075\060\071\061\015\062\062\063\076\064\074\065" +
    "\100\066\065\067\070\001\002\000\004\061\015\001\002" +
    "\000\004\007\121\001\002\000\040\005\077\007\067\010" +
    "\uffd2\025\060\031\101\056\103\057\075\060\071\061\015" +
    "\062\062\063\076\064\074\065\100\066\065\067\070\001" +
    "\002\000\004\010\126\001\002\000\024\004\113\005\115" +
    "\006\116\010\uffd3\022\111\023\114\024\112\027\124\030" +
    "\117\001\002\000\040\005\077\007\067\010\uffd2\025\060" +
    "\031\101\056\103\057\075\060\071\061\015\062\062\063" +
    "\076\064\074\065\100\066\065\067\070\001\002\000\004" +
    "\010\uffd4\001\002\000\026\004\uffd5\005\uffd5\006\uffd5\010" +
    "\uffd5\022\uffd5\023\uffd5\024\uffd5\027\uffd5\030\uffd5\044\uffd5" +
    "\001\002\000\026\004\uffcb\005\uffcb\006\uffcb\010\uffcb\022" +
    "\uffcb\023\uffcb\024\uffcb\027\uffcb\030\uffcb\044\uffcb\001\002" +
    "\000\026\004\uffcc\005\uffcc\006\116\010\uffcc\022\uffcc\023" +
    "\uffcc\024\uffcc\027\uffcc\030\uffcc\044\uffcc\001\002\000\026" +
    "\004\113\005\115\006\116\010\uffce\022\111\023\uffce\024" +
    "\uffce\027\uffce\030\uffce\044\uffce\001\002\000\026\004\uffcd" +
    "\005\uffcd\006\116\010\uffcd\022\uffcd\023\uffcd\024\uffcd\027" +
    "\uffcd\030\uffcd\044\uffcd\001\002\000\026\004\113\005\115" +
    "\006\116\010\uffd0\022\111\023\uffd0\024\uffd0\027\uffd0\030" +
    "\uffd0\044\uffd0\001\002\000\026\004\113\005\115\006\116" +
    "\010\uffd1\022\uffd1\023\uffd1\024\uffd1\027\uffd1\030\uffd1\044" +
    "\uffd1\001\002\000\022\004\113\005\115\006\116\010\136" +
    "\022\111\023\114\024\112\030\117\001\002\000\026\004" +
    "\uffc8\005\uffc8\006\uffc8\010\uffc8\022\uffc8\023\uffc8\024\uffc8" +
    "\027\uffc8\030\uffc8\044\uffc8\001\002\000\036\005\077\007" +
    "\067\025\060\031\101\056\103\057\075\060\071\061\015" +
    "\062\062\063\076\064\074\065\100\066\065\067\070\001" +
    "\002\000\022\004\113\005\115\006\116\010\141\022\111" +
    "\023\114\024\112\030\117\001\002\000\004\044\142\001" +
    "\002\000\056\005\uffdb\007\uffdb\011\uffdb\012\uffdb\020\uffdb" +
    "\025\uffdb\026\uffdb\031\uffdb\033\uffdb\052\uffdb\054\uffdb\055" +
    "\uffdb\056\uffdb\057\uffdb\060\uffdb\061\uffdb\062\uffdb\063\uffdb" +
    "\064\uffdb\065\uffdb\066\uffdb\067\uffdb\001\002\000\004\007" +
    "\144\001\002\000\004\010\145\001\002\000\026\004\uffcf" +
    "\005\uffcf\006\uffcf\010\uffcf\022\uffcf\023\uffcf\024\uffcf\027" +
    "\uffcf\030\uffcf\044\uffcf\001\002\000\026\004\uffc9\005\uffc9" +
    "\006\uffc9\010\uffc9\022\uffc9\023\uffc9\024\uffc9\027\uffc9\030" +
    "\uffc9\044\uffc9\001\002\000\036\005\077\007\067\025\060" +
    "\031\101\056\103\057\075\060\071\061\015\062\062\063" +
    "\076\064\074\065\100\066\065\067\070\001\002\000\022" +
    "\004\113\005\115\006\116\010\151\022\111\023\114\024" +
    "\112\030\117\001\002\000\026\004\uffc7\005\uffc7\006\uffc7" +
    "\010\uffc7\022\uffc7\023\uffc7\024\uffc7\027\uffc7\030\uffc7\044" +
    "\uffc7\001\002\000\036\005\077\007\067\025\060\031\101" +
    "\056\103\057\075\060\071\061\015\062\062\063\076\064" +
    "\074\065\100\066\065\067\070\001\002\000\004\012\154" +
    "\001\002\000\006\012\ufff3\032\ufff3\001\002\000\022\004" +
    "\113\005\115\006\116\022\111\023\114\024\112\030\117" +
    "\044\156\001\002\000\004\012\ufff5\001\002\000\036\005" +
    "\077\007\067\025\060\031\101\056\103\057\075\060\071" +
    "\061\015\062\062\063\076\064\074\065\100\066\065\067" +
    "\070\001\002\000\022\004\113\005\115\006\116\022\111" +
    "\023\114\024\112\027\161\030\117\001\002\000\036\005" +
    "\077\007\067\025\060\031\101\056\103\057\075\060\071" +
    "\061\015\062\062\063\076\064\074\065\100\066\065\067" +
    "\070\001\002\000\022\004\113\005\115\006\116\022\111" +
    "\023\114\024\112\027\163\030\117\001\002\000\036\005" +
    "\077\007\067\025\060\031\101\056\103\057\075\060\071" +
    "\061\015\062\062\063\076\064\074\065\100\066\065\067" +
    "\070\001\002\000\022\004\113\005\115\006\116\010\165" +
    "\022\111\023\114\024\112\030\117\001\002\000\004\044" +
    "\166\001\002\000\056\005\uffdd\007\uffdd\011\uffdd\012\uffdd" +
    "\020\uffdd\025\uffdd\026\uffdd\031\uffdd\033\uffdd\052\uffdd\054" +
    "\uffdd\055\uffdd\056\uffdd\057\uffdd\060\uffdd\061\uffdd\062\uffdd" +
    "\063\uffdd\064\uffdd\065\uffdd\066\uffdd\067\uffdd\001\002\000" +
    "\004\010\172\001\002\000\022\004\113\005\115\006\116" +
    "\010\171\022\111\023\114\024\112\030\117\001\002\000" +
    "\026\004\uffbf\005\uffbf\006\uffbf\010\uffbf\022\uffbf\023\uffbf" +
    "\024\uffbf\027\uffbf\030\uffbf\044\uffbf\001\002\000\036\005" +
    "\077\007\067\025\060\031\101\056\103\057\075\060\071" +
    "\061\015\062\062\063\076\064\074\065\100\066\065\067" +
    "\070\001\002\000\026\004\uffca\005\uffca\006\uffca\010\uffca" +
    "\022\uffca\023\uffca\024\uffca\027\uffca\030\uffca\044\uffca\001" +
    "\002\000\022\004\uffbe\005\uffbe\006\uffbe\022\uffbe\023\uffbe" +
    "\024\uffbe\030\uffbe\045\177\001\002\000\004\012\176\001" +
    "\002\000\056\005\uffde\007\uffde\011\uffde\012\uffde\020\uffde" +
    "\025\uffde\026\uffde\031\uffde\033\uffde\052\uffde\054\uffde\055" +
    "\uffde\056\uffde\057\uffde\060\uffde\061\uffde\062\uffde\063\uffde" +
    "\064\uffde\065\uffde\066\uffde\067\uffde\001\002\000\036\005" +
    "\077\007\067\025\060\031\101\056\103\057\075\060\071" +
    "\061\015\062\062\063\076\064\074\065\100\066\065\067" +
    "\070\001\002\000\022\004\113\005\115\006\116\022\111" +
    "\023\114\024\112\030\117\044\201\001\002\000\056\005" +
    "\uffd7\007\uffd7\011\uffd7\012\uffd7\020\uffd7\025\uffd7\026\uffd7" +
    "\031\uffd7\033\uffd7\052\uffd7\054\uffd7\055\uffd7\056\uffd7\057" +
    "\uffd7\060\uffd7\061\uffd7\062\uffd7\063\uffd7\064\uffd7\065\uffd7" +
    "\066\uffd7\067\uffd7\001\002\000\036\005\077\007\067\025" +
    "\060\031\101\056\103\057\075\060\071\061\015\062\062" +
    "\063\076\064\074\065\100\066\065\067\070\001\002\000" +
    "\022\004\113\005\115\006\116\010\204\022\111\023\114" +
    "\024\112\030\117\001\002\000\054\005\077\007\067\011" +
    "\210\020\207\021\uffdf\025\060\026\206\031\101\052\211" +
    "\054\054\055\213\056\103\057\075\060\071\061\015\062" +
    "\062\063\076\064\074\065\100\066\065\067\070\001\002" +
    "\000\056\005\uffda\007\uffda\011\uffda\012\uffda\020\uffda\025" +
    "\uffda\026\uffda\031\uffda\033\uffda\052\uffda\054\uffda\055\uffda" +
    "\056\uffda\057\uffda\060\uffda\061\uffda\062\uffda\063\uffda\064" +
    "\uffda\065\uffda\066\uffda\067\uffda\001\002\000\004\007\242" +
    "\001\002\000\004\007\234\001\002\000\054\005\077\007" +
    "\067\011\066\012\uffba\020\064\025\060\026\057\031\101" +
    "\052\072\054\054\055\102\056\103\057\075\060\071\061" +
    "\015\062\062\063\076\064\074\065\100\066\065\067\070" +
    "\001\002\000\004\007\222\001\002\000\004\021\220\001" +
    "\002\000\004\007\214\001\002\000\036\005\077\007\067" +
    "\025\060\031\101\056\103\057\075\060\071\061\015\062" +
    "\062\063\076\064\074\065\100\066\065\067\070\001\002" +
    "\000\022\004\113\005\115\006\116\010\216\022\111\023" +
    "\114\024\112\030\117\001\002\000\004\044\217\001\002" +
    "\000\060\005\uffdb\007\uffdb\011\uffdb\012\uffdb\020\uffdb\021" +
    "\uffe2\025\uffdb\026\uffdb\031\uffdb\033\uffdb\052\uffdb\054\uffdb" +
    "\055\uffdb\056\uffdb\057\uffdb\060\uffdb\061\uffdb\062\uffdb\063" +
    "\uffdb\064\uffdb\065\uffdb\066\uffdb\067\uffdb\001\002\000\052" +
    "\005\077\007\067\011\066\020\064\025\060\026\057\031" +
    "\101\052\072\054\054\055\102\056\103\057\075\060\071" +
    "\061\015\062\062\063\076\064\074\065\100\066\065\067" +
    "\070\001\002\000\056\005\uffd9\007\uffd9\011\uffd9\012\uffd9" +
    "\020\uffd9\025\uffd9\026\uffd9\031\uffd9\033\uffd9\052\uffd9\054" +
    "\uffd9\055\uffd9\056\uffd9\057\uffd9\060\uffd9\061\uffd9\062\uffd9" +
    "\063\uffd9\064\uffd9\065\uffd9\066\uffd9\067\uffd9\001\002\000" +
    "\036\005\077\007\067\025\060\031\101\056\103\057\075" +
    "\060\071\061\015\062\062\063\076\064\074\065\100\066" +
    "\065\067\070\001\002\000\022\004\113\005\115\006\116" +
    "\022\111\023\114\024\112\027\224\030\117\001\002\000" +
    "\036\005\077\007\067\025\060\031\101\056\103\057\075" +
    "\060\071\061\015\062\062\063\076\064\074\065\100\066" +
    "\065\067\070\001\002\000\022\004\113\005\115\006\116" +
    "\022\111\023\114\024\112\027\226\030\117\001\002\000" +
    "\036\005\077\007\067\025\060\031\101\056\103\057\075" +
    "\060\071\061\015\062\062\063\076\064\074\065\100\066" +
    "\065\067\070\001\002\000\022\004\113\005\115\006\116" +
    "\010\230\022\111\023\114\024\112\030\117\001\002\000" +
    "\004\044\231\001\002\000\060\005\uffdd\007\uffdd\011\uffdd" +
    "\012\uffdd\020\uffdd\021\uffe3\025\uffdd\026\uffdd\031\uffdd\033" +
    "\uffdd\052\uffdd\054\uffdd\055\uffdd\056\uffdd\057\uffdd\060\uffdd" +
    "\061\uffdd\062\uffdd\063\uffdd\064\uffdd\065\uffdd\066\uffdd\067" +
    "\uffdd\001\002\000\004\012\233\001\002\000\060\005\uffde" +
    "\007\uffde\011\uffde\012\uffde\020\uffde\021\uffe4\025\uffde\026" +
    "\uffde\031\uffde\033\uffde\052\uffde\054\uffde\055\uffde\056\uffde" +
    "\057\uffde\060\uffde\061\uffde\062\uffde\063\uffde\064\uffde\065" +
    "\uffde\066\uffde\067\uffde\001\002\000\036\005\077\007\067" +
    "\025\060\031\101\056\103\057\075\060\071\061\015\062" +
    "\062\063\076\064\074\065\100\066\065\067\070\001\002" +
    "\000\022\004\113\005\115\006\116\010\236\022\111\023" +
    "\114\024\112\030\117\001\002\000\054\005\077\007\067" +
    "\011\210\020\207\021\uffdf\025\060\026\206\031\101\052" +
    "\211\054\054\055\213\056\103\057\075\060\071\061\015" +
    "\062\062\063\076\064\074\065\100\066\065\067\070\001" +
    "\002\000\004\021\240\001\002\000\054\005\077\007\067" +
    "\011\210\020\207\021\uffdf\025\060\026\206\031\101\052" +
    "\211\054\054\055\213\056\103\057\075\060\071\061\015" +
    "\062\062\063\076\064\074\065\100\066\065\067\070\001" +
    "\002\000\004\021\uffe1\001\002\000\036\005\077\007\067" +
    "\025\060\031\101\056\103\057\075\060\071\061\015\062" +
    "\062\063\076\064\074\065\100\066\065\067\070\001\002" +
    "\000\022\004\113\005\115\006\116\010\244\022\111\023" +
    "\114\024\112\030\117\001\002\000\054\005\077\007\067" +
    "\011\210\020\207\021\uffdf\025\060\026\206\031\101\052" +
    "\211\054\054\055\213\056\103\057\075\060\071\061\015" +
    "\062\062\063\076\064\074\065\100\066\065\067\070\001" +
    "\002\000\056\005\uffd8\007\uffd8\011\uffd8\012\uffd8\020\uffd8" +
    "\025\uffd8\026\uffd8\031\uffd8\033\uffd8\052\uffd8\054\uffd8\055" +
    "\uffd8\056\uffd8\057\uffd8\060\uffd8\061\uffd8\062\uffd8\063\uffd8" +
    "\064\uffd8\065\uffd8\066\uffd8\067\uffd8\001\002\000\004\021" +
    "\uffe0\001\002\000\056\005\uffd6\007\uffd6\011\uffd6\012\uffd6" +
    "\020\uffd6\025\uffd6\026\uffd6\031\uffd6\033\uffd6\052\uffd6\054" +
    "\uffd6\055\uffd6\056\uffd6\057\uffd6\060\uffd6\061\uffd6\062\uffd6" +
    "\063\uffd6\064\uffd6\065\uffd6\066\uffd6\067\uffd6\001\002\000" +
    "\026\004\uffc0\005\uffc0\006\uffc0\010\uffc0\022\uffc0\023\uffc0" +
    "\024\uffc0\027\uffc0\030\uffc0\044\uffc0\001\002\000\036\005" +
    "\077\007\067\025\060\031\101\056\103\057\075\060\071" +
    "\061\015\062\062\063\076\064\074\065\100\066\065\067" +
    "\070\001\002\000\022\004\113\005\115\006\116\010\253" +
    "\022\111\023\114\024\112\030\117\001\002\000\052\005" +
    "\077\007\067\011\066\020\064\025\060\026\057\031\101" +
    "\052\072\054\054\055\102\056\103\057\075\060\071\061" +
    "\015\062\062\063\076\064\074\065\100\066\065\067\070" +
    "\001\002\000\006\012\uffbb\033\uffbb\001\002\000\036\005" +
    "\077\007\067\025\060\031\101\056\103\057\075\060\071" +
    "\061\015\062\062\063\076\064\074\065\100\066\065\067" +
    "\070\001\002\000\022\004\113\005\115\006\116\022\111" +
    "\023\114\024\112\027\257\030\117\001\002\000\036\005" +
    "\077\007\067\025\060\031\101\056\103\057\075\060\071" +
    "\061\015\062\062\063\076\064\074\065\100\066\065\067" +
    "\070\001\002\000\022\004\113\005\115\006\116\010\261" +
    "\022\111\023\114\024\112\030\117\001\002\000\004\044" +
    "\262\001\002\000\056\005\uffdc\007\uffdc\011\uffdc\012\uffdc" +
    "\020\uffdc\025\uffdc\026\uffdc\031\uffdc\033\uffdc\052\uffdc\054" +
    "\uffdc\055\uffdc\056\uffdc\057\uffdc\060\uffdc\061\uffdc\062\uffdc" +
    "\063\uffdc\064\uffdc\065\uffdc\066\uffdc\067\uffdc\001\002\000" +
    "\006\010\ufff1\027\ufff1\001\002\000\006\002\ufff7\037\ufff7" +
    "\001\002\000\006\012\uffed\032\uffed\001\002\000\004\002" +
    "\ufff9\001\002\000\004\011\270\001\002\000\004\032\271" +
    "\001\002\000\004\034\272\001\002\000\004\036\273\001" +
    "\002\000\004\016\274\001\002\000\004\007\275\001\002" +
    "\000\004\035\276\001\002\000\004\041\277\001\002\000" +
    "\004\042\300\001\002\000\004\061\015\001\002\000\004" +
    "\010\302\001\002\000\004\011\303\001\002\000\054\005" +
    "\077\007\067\011\066\012\uffba\020\064\025\060\026\057" +
    "\031\101\052\072\054\054\055\102\056\103\057\075\060" +
    "\071\061\015\062\062\063\076\064\074\065\100\066\065" +
    "\067\070\001\002\000\004\012\305\001\002\000\004\012" +
    "\ufffb\001\002\000\004\012\307\001\002\000\006\002\ufffa" +
    "\037\ufffa\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\306\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\010\001\001" +
    "\000\004\022\266\001\001\000\006\012\011\017\012\001" +
    "\001\000\006\012\011\017\265\001\001\000\002\001\001" +
    "\000\004\022\015\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\020\001\001\000\002\001\001\000\014" +
    "\010\027\011\034\014\022\022\031\023\024\001\001\000" +
    "\002\001\001\000\004\010\264\001\001\000\006\011\040" +
    "\022\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\041\001\001\000\002\001\001\000" +
    "\012\011\045\015\044\016\043\022\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\046\001\001\000" +
    "\002\001\001\000\010\011\045\015\262\022\031\001\001" +
    "\000\002\001\001\000\004\024\052\001\001\000\020\003" +
    "\062\004\054\005\072\011\034\022\055\023\024\026\060" +
    "\001\001\000\002\001\001\000\014\003\062\004\054\005" +
    "\253\022\173\026\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\003\247\022\106\026\105\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\003\062\004\054\005" +
    "\174\022\173\026\060\001\001\000\010\003\167\022\106" +
    "\026\105\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\025\152\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\145\022" +
    "\106\026\105\001\001\000\002\001\001\000\004\022\142" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\104\022\106\026\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\003\134\022\106\026" +
    "\105\001\001\000\010\003\133\022\106\026\105\001\001" +
    "\000\010\003\132\022\106\026\105\001\001\000\010\003" +
    "\131\022\106\026\105\001\001\000\010\003\130\022\106" +
    "\026\105\001\001\000\010\003\127\022\106\026\105\001" +
    "\001\000\010\003\126\022\106\026\105\001\001\000\004" +
    "\022\117\001\001\000\002\001\001\000\012\003\122\022" +
    "\106\026\105\027\121\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\003\122\022\106\026\105\027\124\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\003\137\022\106\026\105\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\003\147\022\106\026\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\003\154\022\106\026" +
    "\105\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\003\157\022\106\026" +
    "\105\001\001\000\002\001\001\000\010\003\161\022\106" +
    "\026\105\001\001\000\002\001\001\000\010\003\163\022" +
    "\106\026\105\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\172\022\106\026\105\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\177\022\106\026\105\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\202\022" +
    "\106\026\105\001\001\000\002\001\001\000\014\003\062" +
    "\004\204\007\211\022\173\026\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\003\062" +
    "\004\054\005\231\022\173\026\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\003\214" +
    "\022\106\026\105\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\003\062\004\220\022\173" +
    "\026\060\001\001\000\002\001\001\000\010\003\222\022" +
    "\106\026\105\001\001\000\002\001\001\000\010\003\224" +
    "\022\106\026\105\001\001\000\002\001\001\000\010\003" +
    "\226\022\106\026\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\003\234\022\106\026\105\001\001\000\002" +
    "\001\001\000\014\003\062\004\204\007\236\022\173\026" +
    "\060\001\001\000\002\001\001\000\014\003\062\004\220" +
    "\007\240\022\173\026\060\001\001\000\002\001\001\000" +
    "\010\003\242\022\106\026\105\001\001\000\002\001\001" +
    "\000\014\003\062\004\244\007\245\022\173\026\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\003\251\022\106\026\105\001" +
    "\001\000\002\001\001\000\012\003\062\004\244\022\173" +
    "\026\060\001\001\000\002\001\001\000\010\003\255\022" +
    "\106\026\105\001\001\000\002\001\001\000\010\003\257" +
    "\022\106\026\105\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\300\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\003\062\004\054\005" +
    "\303\022\173\026\060\001\001\000\002\001\001\000\004" +
    "\030\305\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$mj$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$mj$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$mj$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public PrintWriter out;
    public String programName;

    public void unrecovered_syntax_error(Symbol cur_SymbolValue) {
        report_fatal_error("Fatal syntax error", cur_SymbolValue);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        done_parsing();
        Symbol SymbolValue = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)SymbolValue.value;
        throw new mjparser.ParseException("Fatal parsing error",
                                          tok.line, tok.pos);
    }

    public void report_error(String message, Object info) {
        Symbol SymbolValue = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)SymbolValue.value;
        System.err.println("[" + tok.line + "," + tok.pos + "] "
                               + message + " at " + tok.toString() );
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$mj$actions {
  private final mj parser;

  /** Constructor */
  CUP$mj$actions(mj parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$mj$do_action(
    int                        CUP$mj$act_num,
    java_cup.runtime.lr_parser CUP$mj$parser,
    java.util.Stack            CUP$mj$stack,
    int                        CUP$mj$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$mj$result;

      /* select the action based on the action number */
      switch (CUP$mj$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // statement_list ::= 
            {
              ArrayList<IStatement> RESULT =null;
		RESULT = new ArrayList<IStatement>();
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement_list",3, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // statement_list ::= statement statement_list 
            {
              ArrayList<IStatement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IStatement s = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		ArrayList<IStatement> s1 = (ArrayList<IStatement>)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
             s1.add(s);
             RESULT = s1;
          
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement_list",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // exp ::= dot_expr 
            {
              IExp RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		CallExp d = (CallExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		RESULT = d;
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // exp ::= THIS 
            {
              IExp RESULT =null;
		int thleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int thright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue th = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
            RESULT = new ThisLiteral(th.line, th.pos, th.lexeme, th.value);
            
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // exp ::= identifier 
            {
              IExp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IdLiteral id = (IdLiteral)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
          RESULT = id;
          
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // exp ::= LPAREN exp RPAREN 
            {
              IExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 RESULT = e; 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // exp ::= NOT exp 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		RESULT = new NotExp(op.line,op.pos, e); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // exp ::= TONE_LITERAL 
            {
              IExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		RESULT = new ToneLiteral(t.line, t.pos, t.lexeme, t.value);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // exp ::= FALSE 
            {
              IExp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue f = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		RESULT = new FalseLiteral(f.line, f.pos, f.lexeme, f.value); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // exp ::= TRUE 
            {
              IExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new TrueLiteral(t.line, t.pos, t.lexeme, t.value);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // exp ::= BUTTON_LITERAL 
            {
              IExp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue b = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ButtonLiteral(b.line, b.pos, b.lexeme, b.value); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // exp ::= COLOR_LITERAL 
            {
              IExp RESULT =null;
		int colorleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue color = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ColorLiteral(color.line, color.pos, color.lexeme, color.value); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // exp ::= INT_LITERAL 
            {
              IExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue i = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new IntLiteral(i.line, i.pos, i.lexeme, i.value); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exp ::= MEGGYCHECKBUTTON LPAREN exp RPAREN 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 RESULT = new MeggyCheckButton(op.line, op.pos, e);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exp ::= MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 RESULT = new MeggyGetPixel(op.line, op.pos, e, e2);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp ::= MINUS exp 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new NegExp(op.line, op.pos, e);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp ::= LPAREN BYTE RPAREN exp 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ByteCast(op.line, op.pos, e); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp ::= exp TIMES exp 
            {
              IExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
            RESULT = new MulExp(op.line, op.pos, e, e1);
            
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= exp MINUS exp 
            {
              IExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
            RESULT = new MinusExp(op.line, op.pos, e, e1);
            
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= exp PLUS exp 
            {
              IExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
            RESULT = new PlusExp(op.line, op.pos, e, e1);
            
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= exp EQUAL exp 
            {
              IExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
            RESULT = new EqualExp(op.line, op.pos, e, e1);
            
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= NEW identifier LPAREN RPAREN 
            {
              IExp RESULT =null;
		int neleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int neright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue ne = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IdLiteral id = (IdLiteral)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		 RESULT = new NewExp(ne.line, ne.pos, id.getLexeme());
              
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= exp AND exp 
            {
              IExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
            RESULT = new AndExp(op.line, op.pos, e, e1);
            
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= exp LT exp 
            {
              IExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
          RESULT = new LtExp(op.line, op.pos, e, e1);
          
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // call_param ::= 
            {
              ArrayList<IExp> RESULT =null;
		ArrayList<IExp> temp = new ArrayList<IExp>();          //Giving it nothing, make an empty list
      RESULT = temp;
              CUP$mj$result = parser.getSymbolFactory().newSymbol("call_param",21, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // call_param ::= exp 
            {
              ArrayList<IExp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
    ArrayList<IExp> temp = new ArrayList<IExp>();
    temp.add(e);
    RESULT = temp;
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("call_param",21, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // call_param ::= exp COMMA call_param 
            {
              ArrayList<IExp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		ArrayList<IExp> p = (ArrayList<IExp>)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
p.add(e);
RESULT = p;
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("call_param",21, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // dot_expr ::= exp DOT identifier LPAREN call_param RPAREN 
            {
              CallExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue d = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		IdLiteral id = (IdLiteral)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		ArrayList<IExp> p = (ArrayList<IExp>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
    RESULT = new CallExp(d.line, d.pos, e, id.getLexeme(), p);
   
              CUP$mj$result = parser.getSymbolFactory().newSymbol("dot_expr",20, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // statement ::= dot_expr SEMI 
            {
              IStatement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		CallExp d = (CallExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue s = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
          RESULT = new CallStatement(s.line, s.pos, d.getExp(), d.getId(), d.getArgs());
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statement ::= identifier ASSIGN exp SEMI 
            {
              IStatement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		IdLiteral id = (IdLiteral)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
                                  // Asssignemnt operation. I think this is right? @Chase?
            RESULT = new AssignStatement(a.line, a.pos, id.getLexeme(), e);
            
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // statement ::= WHILE LPAREN exp RPAREN statement 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement s = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
            RESULT = new WhileStatement(op.line, op.pos, e, s);
          
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statement ::= IF LPAREN exp RPAREN if_stmt ELSE statement 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IStatement s = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement s2 = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
          RESULT = new IfStatement(op.line, op.pos, e, s, s2);
        
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // statement ::= IF LPAREN exp RPAREN statement 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement s = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
          RESULT = new IfStatement(op.line, op.pos, e, s, null);
          
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statement ::= MEGGYDELAY LPAREN exp RPAREN SEMI 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		
            System.out.println("Delay");
            RESULT = new MeggyDelay(op.line, op.pos, e);
          
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statement ::= MEGGYTONESTART LPAREN exp COMMA exp RPAREN SEMI 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		
          RESULT = new MeggyToneStart(op.line, op.pos, e, e1);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statement ::= MEGGYSETPIXEL LPAREN exp COMMA exp COMMA exp RPAREN SEMI 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp b = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp color = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		
            System.out.println("Set pix");
            RESULT = new MeggySetPixel(op.line, op.pos, a, b, color);
          
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement ::= LBRACE statement_list RBRACE 
            {
              IStatement RESULT =null;
		int braceleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int braceright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue brace = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		ArrayList<IStatement> s = (ArrayList<IStatement>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
          RESULT = new BlockStatement(brace.line, brace.pos, s);
          
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // if_stmt ::= 
            {
              IStatement RESULT =null;
		
              CUP$mj$result = parser.getSymbolFactory().newSymbol("if_stmt",5, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // if_stmt ::= WHILE LPAREN exp RPAREN if_stmt 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement s = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new WhileStatement(op.line, op.pos, e, s);
      
              CUP$mj$result = parser.getSymbolFactory().newSymbol("if_stmt",5, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // if_stmt ::= IF LPAREN exp RPAREN if_stmt ELSE if_stmt 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IStatement s = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement s2 = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
      RESULT = new IfStatement(op.line, op.pos, e, s, s2);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("if_stmt",5, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // if_stmt ::= MEGGYDELAY LPAREN exp RPAREN SEMI 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		
        System.out.println("Delay");
        RESULT = new MeggyDelay(op.line, op.pos, e);
      
              CUP$mj$result = parser.getSymbolFactory().newSymbol("if_stmt",5, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // if_stmt ::= MEGGYSETPIXEL LPAREN exp COMMA exp COMMA exp RPAREN SEMI 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp b = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp color = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		
        System.out.println("Set pix");
        RESULT = new MeggySetPixel(op.line, op.pos, a, b, color);
      
              CUP$mj$result = parser.getSymbolFactory().newSymbol("if_stmt",5, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // if_stmt ::= LBRACE statement_list RBRACE 
            {
              IStatement RESULT =null;
		int braceleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int braceright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue brace = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		ArrayList<IStatement> s = (ArrayList<IStatement>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
      RESULT = new BlockStatement(brace.line, brace.pos, s);
      
              CUP$mj$result = parser.getSymbolFactory().newSymbol("if_stmt",5, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // type ::= identifier 
            {
              IType RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IdLiteral id = (IdLiteral)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ClassType(id.getLine(), id.getPos(), id.getLexeme());
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // type ::= MEGGYTONE 
            {
              IType RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue m = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ToneType(m.line, m.pos); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // type ::= MEGGYBUTTON 
            {
              IType RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue m = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new BoolType(m.line, m.pos); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // type ::= MEGGYCOLOR 
            {
              IType RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue m = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new VoidType(m.line, m.pos); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // type ::= VOID 
            {
              IType RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue v = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		RESULT = new VoidType(v.line, v.pos);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // type ::= INT 
            {
              IType RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue i = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new IntType(i.line, i.pos); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type ::= BYTE 
            {
              IType RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue b = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ByteType(b.line, b.pos); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type ::= BOOLEAN 
            {
              IType RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue b = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new BoolType(b.line, b.pos); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // method_declaration_list ::= method_declaration_list method_declaration 
            {
              ArrayList<MethodDecl> RESULT =null;
		int m1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		ArrayList<MethodDecl> m1 = (ArrayList<MethodDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		MethodDecl m = (MethodDecl)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        m1.add(m);
        RESULT = m1;
        
              CUP$mj$result = parser.getSymbolFactory().newSymbol("method_declaration_list",10, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // method_declaration_list ::= method_declaration 
            {
              ArrayList<MethodDecl> RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		MethodDecl m = (MethodDecl)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
      ArrayList<MethodDecl> m1 = new ArrayList<MethodDecl>();
      m1.add(m);
      RESULT = m1;
      
              CUP$mj$result = parser.getSymbolFactory().newSymbol("method_declaration_list",10, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // method_param ::= type identifier 
            {
              Formal RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IType t = (IType)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IdLiteral id = (IdLiteral)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
      RESULT = new Formal(t.getLine(), t.getPos(), t, id.getLexeme());
      
              CUP$mj$result = parser.getSymbolFactory().newSymbol("method_param",11, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // method_param_list ::= 
            {
              ArrayList<Formal> RESULT =null;
		ArrayList<Formal> f1 = new ArrayList<Formal>();
        RESULT = f1;
        
              CUP$mj$result = parser.getSymbolFactory().newSymbol("method_param_list",12, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // method_param_list ::= method_param_list COMMA method_param 
            {
              ArrayList<Formal> RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		ArrayList<Formal> f1 = (ArrayList<Formal>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		Formal m = (Formal)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
      f1.add(m);
      RESULT = f1;
      
              CUP$mj$result = parser.getSymbolFactory().newSymbol("method_param_list",12, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // method_param_list ::= method_param 
            {
              ArrayList<Formal> RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		Formal m = (Formal)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
      ArrayList<Formal> f1 = new ArrayList<Formal>();
      f1.add(m);
      RESULT = f1;
      
              CUP$mj$result = parser.getSymbolFactory().newSymbol("method_param_list",12, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // method_declaration ::= PUBLIC type identifier LPAREN method_param_list RPAREN LBRACE vardec_list statement_list returns RBRACE 
            {
              MethodDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-9)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-9)).right;
		IType t = (IType)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).right;
		IdLiteral id = (IdLiteral)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-8)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		ArrayList<Formal> p = (ArrayList<Formal>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		ArrayList<VarDecl> v = (ArrayList<VarDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		ArrayList<IStatement> list = (ArrayList<IStatement>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp r = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
      //  ArrayList<VarDecl> v = new ArrayList<VarDecl>(); // look here pls. PA4 no more
        RESULT = new MethodDecl(t.getLine(), t.getPos(), t, id.getLexeme(), p, v, list, r ); // look at this chase. Since we have no vardecls, is that list null? look at MethodDecl.java.
      
              CUP$mj$result = parser.getSymbolFactory().newSymbol("method_declaration",6, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-10)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // returns ::= 
            {
              IExp RESULT =null;
		RESULT = null;
              CUP$mj$result = parser.getSymbolFactory().newSymbol("returns",19, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // returns ::= RETURN exp SEMI 
            {
              IExp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue r = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
    RESULT = e;
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("returns",19, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // top_class_declaration ::= CLASS identifier LBRACE RBRACE 
            {
              IClassDecl RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IdLiteral name = (IdLiteral)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		
        RESULT = new TopClassDecl(a.line, a.pos, name.getLexeme(), new ArrayList<VarDecl>(), null);
        
              CUP$mj$result = parser.getSymbolFactory().newSymbol("top_class_declaration",8, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // top_class_declaration ::= CLASS identifier LBRACE vardec_list method_declaration_list RBRACE 
            {
              IClassDecl RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IdLiteral name = (IdLiteral)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		ArrayList<VarDecl> v = (ArrayList<VarDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		ArrayList<MethodDecl> list = (ArrayList<MethodDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
      RESULT = new TopClassDecl(a.line, a.pos, name.getLexeme(), v, list);  //IClassDecl or ClassType?
      
              CUP$mj$result = parser.getSymbolFactory().newSymbol("top_class_declaration",8, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // class_declaration_list ::= 
            {
              ArrayList<IClassDecl> RESULT =null;
		RESULT = new ArrayList<IClassDecl>();
              CUP$mj$result = parser.getSymbolFactory().newSymbol("class_declaration_list",13, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // class_declaration_list ::= top_class_declaration class_declaration_list 
            {
              ArrayList<IClassDecl> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IClassDecl t = (IClassDecl)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		ArrayList<IClassDecl> c1 = (ArrayList<IClassDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
      c1.add(t);
      RESULT = c1;
      
              CUP$mj$result = parser.getSymbolFactory().newSymbol("class_declaration_list",13, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // main_class ::= CLASS identifier LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET identifier RPAREN LBRACE statement_list RBRACE NT$0 RBRACE 
            {
              MainClass RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (MainClass) ((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-17)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-17)).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-17)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-16)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-16)).right;
		IdLiteral name = (IdLiteral)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-16)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		IdLiteral param = (IdLiteral)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue b = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		ArrayList<IStatement> list = (ArrayList<IStatement>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;

              CUP$mj$result = parser.getSymbolFactory().newSymbol("main_class",4, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-17)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$0 ::= 
            {
              MainClass RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-15)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-15)).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-15)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-14)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-14)).right;
		IdLiteral name = (IdLiteral)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-14)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IdLiteral param = (IdLiteral)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue b = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		ArrayList<IStatement> list = (ArrayList<IStatement>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;


            if (!parser.programName.equals(name.getLexeme() + ".java")) {
              throw new java.lang.Error();
            }

            BlockStatement block = new BlockStatement(b.line, b.pos, list);
            RESULT = new MainClass(a.line, a.pos, name.getLexeme(), param.getLexeme(), block);
            //currently prints null, commenting out to not ruin assembly file
          //parser.out.println(list);
          
              CUP$mj$result = parser.getSymbolFactory().newSymbol("NT$0",22, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // program ::= IMPORT MEGGY SEMI main_class class_declaration_list 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		MainClass m = (MainClass)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		ArrayList<IClassDecl> c = (ArrayList<IClassDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
    //  LinkedList<IClassDecl> clist = new LinkedList<IClassDecl>();  //Should not be hardcoded like this; can have multiple class_declarations, child and top
//      clist.add(c);
      RESULT = new Program(a.line, a.pos, m, c);
      
              CUP$mj$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // vardec_list ::= 
            {
              ArrayList<VarDecl> RESULT =null;
		
      ArrayList<VarDecl> v = new ArrayList<VarDecl>();
      RESULT = v;
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("vardec_list",18, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // vardec_list ::= vardec_list vardec 
            {
              ArrayList<VarDecl> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		ArrayList<VarDecl> l = (ArrayList<VarDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		VarDecl v = (VarDecl)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
    l.add(v);
    RESULT = l;
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("vardec_list",18, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // vardec ::= type identifier SEMI 
            {
              VarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IType t = (IType)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IdLiteral id = (IdLiteral)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue s = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
  RESULT = new VarDecl(s.line, s.pos, t, id.getLexeme());
  
              CUP$mj$result = parser.getSymbolFactory().newSymbol("vardec",17, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // identifier ::= ID 
            {
              IdLiteral RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue id = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
    RESULT = new IdLiteral(id.line, id.pos, id.lexeme);
  
              CUP$mj$result = parser.getSymbolFactory().newSymbol("identifier",16, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		RESULT = start_val;
              CUP$mj$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$mj$parser.done_parsing();
          return CUP$mj$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

