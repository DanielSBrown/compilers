Warning : Scanner at 254(9): Unrecognized character '}' -- ignored
Warning : Terminal "UMINUS" was declared but never used
Warning : Terminal "INT" was declared but never used
Warning : Terminal "LT" was declared but never used
Warning : Terminal "ASSIGN" was declared but never used
Warning : Terminal "THIS" was declared but never used
Warning : Terminal "DOT" was declared but never used
Warning : Terminal "TONE_LITERAL" was declared but never used
Warning : Terminal "BOOLEAN" was declared but never used
Warning : Terminal "RETURN" was declared but never used
Warning : Terminal "NEW" was declared but never used
Warning : Terminal "MEGGYSETAUXLEDS" was declared but never used
Warning : Terminal "MEGGYTONESTART" was declared but never used
Warning : Terminal "MEGGYCOLOR" was declared but never used
Warning : Terminal "MEGGYTONE" was declared but never used
Warning : Terminal "EXTENDS" was declared but never used
Warning : Terminal "MEGGYBUTTON" was declared but never used
Warning : Terminal "LENGTH" was declared but never used
Warning : *** Shift/Reduce conflict found in state #57
  between statement ::= IF LPAREN exp RPAREN statement (*) 
  and     statement ::= IF LPAREN exp RPAREN statement (*) ELSE statement 
  under symbol ELSE
  Resolved in favor of shifting.

Warning : *** Shift/Reduce conflict found in state #55
  between exp ::= NOT exp (*) 
  and     exp ::= exp (*) PLUS exp 
  under symbol PLUS
  Resolved in favor of shifting.

Warning : *** Shift/Reduce conflict found in state #55
  between exp ::= NOT exp (*) 
  and     exp ::= exp (*) MINUS exp 
  under symbol MINUS
  Resolved in favor of shifting.

Warning : *** Shift/Reduce conflict found in state #55
  between exp ::= NOT exp (*) 
  and     exp ::= exp (*) EQUAL exp 
  under symbol EQUAL
  Resolved in favor of shifting.

Warning : *** Shift/Reduce conflict found in state #55
  between exp ::= NOT exp (*) 
  and     exp ::= exp (*) AND exp 
  under symbol AND
  Resolved in favor of shifting.

Warning : *** Shift/Reduce conflict found in state #52
  between exp ::= exp PLUS exp (*) 
  and     exp ::= exp (*) PLUS exp 
  under symbol PLUS
  Resolved in favor of shifting.

Warning : *** Shift/Reduce conflict found in state #52
  between exp ::= exp PLUS exp (*) 
  and     exp ::= exp (*) MINUS exp 
  under symbol MINUS
  Resolved in favor of shifting.

Warning : *** Shift/Reduce conflict found in state #52
  between exp ::= exp PLUS exp (*) 
  and     exp ::= exp (*) EQUAL exp 
  under symbol EQUAL
  Resolved in favor of shifting.

Warning : *** Shift/Reduce conflict found in state #52
  between exp ::= exp PLUS exp (*) 
  and     exp ::= exp (*) AND exp 
  under symbol AND
  Resolved in favor of shifting.

Warning : *** Shift/Reduce conflict found in state #43
  between exp ::= LPAREN BYTE RPAREN exp (*) 
  and     exp ::= exp (*) PLUS exp 
  under symbol PLUS
  Resolved in favor of shifting.

Warning : *** Shift/Reduce conflict found in state #43
  between exp ::= LPAREN BYTE RPAREN exp (*) 
  and     exp ::= exp (*) MINUS exp 
  under symbol MINUS
  Resolved in favor of shifting.

Warning : *** Shift/Reduce conflict found in state #43
  between exp ::= LPAREN BYTE RPAREN exp (*) 
  and     exp ::= exp (*) EQUAL exp 
  under symbol EQUAL
  Resolved in favor of shifting.

Warning : *** Shift/Reduce conflict found in state #43
  between exp ::= LPAREN BYTE RPAREN exp (*) 
  and     exp ::= exp (*) AND exp 
  under symbol AND
  Resolved in favor of shifting.

Warning : *** Shift/Reduce conflict found in state #50
  between exp ::= exp MINUS exp (*) 
  and     exp ::= exp (*) PLUS exp 
  under symbol PLUS
  Resolved in favor of shifting.

Warning : *** Shift/Reduce conflict found in state #50
  between exp ::= exp MINUS exp (*) 
  and     exp ::= exp (*) MINUS exp 
  under symbol MINUS
  Resolved in favor of shifting.

Warning : *** Shift/Reduce conflict found in state #50
  between exp ::= exp MINUS exp (*) 
  and     exp ::= exp (*) EQUAL exp 
  under symbol EQUAL
  Resolved in favor of shifting.

Warning : *** Shift/Reduce conflict found in state #50
  between exp ::= exp MINUS exp (*) 
  and     exp ::= exp (*) AND exp 
  under symbol AND
  Resolved in favor of shifting.

Warning : *** Shift/Reduce conflict found in state #51
  between exp ::= exp EQUAL exp (*) 
  and     exp ::= exp (*) PLUS exp 
  under symbol PLUS
  Resolved in favor of shifting.

Warning : *** Shift/Reduce conflict found in state #51
  between exp ::= exp EQUAL exp (*) 
  and     exp ::= exp (*) MINUS exp 
  under symbol MINUS
  Resolved in favor of shifting.

Warning : *** Shift/Reduce conflict found in state #51
  between exp ::= exp EQUAL exp (*) 
  and     exp ::= exp (*) EQUAL exp 
  under symbol EQUAL
  Resolved in favor of shifting.

Warning : *** Shift/Reduce conflict found in state #51
  between exp ::= exp EQUAL exp (*) 
  and     exp ::= exp (*) AND exp 
  under symbol AND
  Resolved in favor of shifting.

Warning : *** Shift/Reduce conflict found in state #60
  between exp ::= MINUS exp (*) 
  and     exp ::= exp (*) PLUS exp 
  under symbol PLUS
  Resolved in favor of shifting.

Warning : *** Shift/Reduce conflict found in state #60
  between exp ::= MINUS exp (*) 
  and     exp ::= exp (*) MINUS exp 
  under symbol MINUS
  Resolved in favor of shifting.

Warning : *** Shift/Reduce conflict found in state #60
  between exp ::= MINUS exp (*) 
  and     exp ::= exp (*) EQUAL exp 
  under symbol EQUAL
  Resolved in favor of shifting.

Warning : *** Shift/Reduce conflict found in state #60
  between exp ::= MINUS exp (*) 
  and     exp ::= exp (*) AND exp 
  under symbol AND
  Resolved in favor of shifting.

Warning : *** Shift/Reduce conflict found in state #53
  between exp ::= exp AND exp (*) 
  and     exp ::= exp (*) PLUS exp 
  under symbol PLUS
  Resolved in favor of shifting.

Warning : *** Shift/Reduce conflict found in state #53
  between exp ::= exp AND exp (*) 
  and     exp ::= exp (*) MINUS exp 
  under symbol MINUS
  Resolved in favor of shifting.

Warning : *** Shift/Reduce conflict found in state #53
  between exp ::= exp AND exp (*) 
  and     exp ::= exp (*) EQUAL exp 
  under symbol EQUAL
  Resolved in favor of shifting.

Warning : *** Shift/Reduce conflict found in state #53
  between exp ::= exp AND exp (*) 
  and     exp ::= exp (*) AND exp 
  under symbol AND
  Resolved in favor of shifting.

Error : *** More conflicts encountered than expected -- parser generation aborted
===== Terminals =====
[0]EOF [1]error [2]PLUS [3]MINUS [4]TIMES 
[5]LPAREN [6]RPAREN [7]LBRACE [8]RBRACE [9]BOOLEAN 
[10]INT [11]BYTE [12]MAIN [13]IMPORT [14]IF 
[15]ELSE [16]LT [17]EQUAL [18]AND [19]NOT 
[20]WHILE [21]COMMA [22]DOT [23]NEW [24]PUBLIC 
[25]RETURN [26]STATIC [27]STRING [28]VOID [29]CLASS 
[30]EXTENDS [31]LBRACKET [32]RBRACKET [33]LENGTH [34]SEMI 
[35]ASSIGN [36]MEGGY [37]MEGGYCOLOR [38]MEGGYBUTTON [39]MEGGYTONE 
[40]MEGGYSETPIXEL [41]MEGGYSETAUXLEDS [42]MEGGYTONESTART [43]MEGGYDELAY [44]MEGGYGETPIXEL 
[45]MEGGYCHECKBUTTON [46]INT_LITERAL [47]ID [48]TRUE [49]FALSE 
[50]COLOR_LITERAL [51]BUTTON_LITERAL [52]TONE_LITERAL [53]THIS [54]UMINUS 


===== Non terminals =====
[0]program [1]exp [2]statement [3]statement_list [4]main_class 
[5]NT$0 [6]NT$1 [7]NT$2 

===== Productions =====
[0] $START ::= program EOF 
[1] program ::= IMPORT MEGGY SEMI main_class 
[2] NT$0 ::= 
[3] NT$1 ::= 
[4] NT$2 ::= 
[5] main_class ::= CLASS ID NT$0 LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET ID RPAREN LBRACE NT$1 statement_list RBRACE NT$2 RBRACE 
[6] statement ::= MEGGYSETPIXEL LPAREN exp COMMA exp COMMA exp RPAREN SEMI 
[7] statement ::= MEGGYDELAY LPAREN exp RPAREN SEMI 
[8] statement ::= IF LPAREN exp RPAREN statement 
[9] statement ::= IF LPAREN exp RPAREN statement ELSE statement 
[10] statement ::= WHILE LPAREN exp RPAREN statement 
[11] exp ::= exp AND exp 
[12] exp ::= exp EQUAL exp 
[13] exp ::= exp PLUS exp 
[14] exp ::= exp MINUS exp 
[15] exp ::= exp TIMES exp 
[16] exp ::= LPAREN BYTE RPAREN exp 
[17] exp ::= MINUS exp 
[18] exp ::= MEGGYGETPIXEL 
[19] exp ::= MEGGYCHECKBUTTON 
[20] exp ::= INT_LITERAL 
[21] exp ::= COLOR_LITERAL 
[22] exp ::= BUTTON_LITERAL 
[23] exp ::= TRUE 
[24] exp ::= FALSE 
[25] exp ::= NOT exp 
[26] exp ::= LPAREN exp RPAREN 
[27] statement_list ::= statement 
[28] statement_list ::= statement_list statement 

===== Viable Prefix Recognizer =====
START lalr_state [0]: {
  [program ::= (*) IMPORT MEGGY SEMI main_class , {EOF }]
  [$START ::= (*) program EOF , {EOF }]
}
transition on IMPORT to state [2]
transition on program to state [1]

-------------------
lalr_state [1]: {
  [$START ::= program (*) EOF , {EOF }]
}
transition on EOF to state [81]

-------------------
lalr_state [2]: {
  [program ::= IMPORT (*) MEGGY SEMI main_class , {EOF }]
}
transition on MEGGY to state [3]

-------------------
lalr_state [3]: {
  [program ::= IMPORT MEGGY (*) SEMI main_class , {EOF }]
}
transition on SEMI to state [4]

-------------------
lalr_state [4]: {
  [main_class ::= (*) CLASS ID NT$0 LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET ID RPAREN LBRACE NT$1 statement_list RBRACE NT$2 RBRACE , {EOF }]
  [program ::= IMPORT MEGGY SEMI (*) main_class , {EOF }]
}
transition on main_class to state [6]
transition on CLASS to state [5]

-------------------
lalr_state [5]: {
  [main_class ::= CLASS (*) ID NT$0 LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET ID RPAREN LBRACE NT$1 statement_list RBRACE NT$2 RBRACE , {EOF }]
}
transition on ID to state [7]

-------------------
lalr_state [6]: {
  [program ::= IMPORT MEGGY SEMI main_class (*) , {EOF }]
}

-------------------
lalr_state [7]: {
  [NT$0 ::= (*) , {LBRACE }]
  [main_class ::= CLASS ID (*) NT$0 LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET ID RPAREN LBRACE NT$1 statement_list RBRACE NT$2 RBRACE , {EOF }]
}
transition on NT$0 to state [8]

-------------------
lalr_state [8]: {
  [main_class ::= CLASS ID NT$0 (*) LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET ID RPAREN LBRACE NT$1 statement_list RBRACE NT$2 RBRACE , {EOF }]
}
transition on LBRACE to state [9]

-------------------
lalr_state [9]: {
  [main_class ::= CLASS ID NT$0 LBRACE (*) PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET ID RPAREN LBRACE NT$1 statement_list RBRACE NT$2 RBRACE , {EOF }]
}
transition on PUBLIC to state [10]

-------------------
lalr_state [10]: {
  [main_class ::= CLASS ID NT$0 LBRACE PUBLIC (*) STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET ID RPAREN LBRACE NT$1 statement_list RBRACE NT$2 RBRACE , {EOF }]
}
transition on STATIC to state [11]

-------------------
lalr_state [11]: {
  [main_class ::= CLASS ID NT$0 LBRACE PUBLIC STATIC (*) VOID MAIN LPAREN STRING LBRACKET RBRACKET ID RPAREN LBRACE NT$1 statement_list RBRACE NT$2 RBRACE , {EOF }]
}
transition on VOID to state [12]

-------------------
lalr_state [12]: {
  [main_class ::= CLASS ID NT$0 LBRACE PUBLIC STATIC VOID (*) MAIN LPAREN STRING LBRACKET RBRACKET ID RPAREN LBRACE NT$1 statement_list RBRACE NT$2 RBRACE , {EOF }]
}
transition on MAIN to state [13]

-------------------
lalr_state [13]: {
  [main_class ::= CLASS ID NT$0 LBRACE PUBLIC STATIC VOID MAIN (*) LPAREN STRING LBRACKET RBRACKET ID RPAREN LBRACE NT$1 statement_list RBRACE NT$2 RBRACE , {EOF }]
}
transition on LPAREN to state [14]

-------------------
lalr_state [14]: {
  [main_class ::= CLASS ID NT$0 LBRACE PUBLIC STATIC VOID MAIN LPAREN (*) STRING LBRACKET RBRACKET ID RPAREN LBRACE NT$1 statement_list RBRACE NT$2 RBRACE , {EOF }]
}
transition on STRING to state [15]

-------------------
lalr_state [15]: {
  [main_class ::= CLASS ID NT$0 LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING (*) LBRACKET RBRACKET ID RPAREN LBRACE NT$1 statement_list RBRACE NT$2 RBRACE , {EOF }]
}
transition on LBRACKET to state [16]

-------------------
lalr_state [16]: {
  [main_class ::= CLASS ID NT$0 LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET (*) RBRACKET ID RPAREN LBRACE NT$1 statement_list RBRACE NT$2 RBRACE , {EOF }]
}
transition on RBRACKET to state [17]

-------------------
lalr_state [17]: {
  [main_class ::= CLASS ID NT$0 LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET (*) ID RPAREN LBRACE NT$1 statement_list RBRACE NT$2 RBRACE , {EOF }]
}
transition on ID to state [18]

-------------------
lalr_state [18]: {
  [main_class ::= CLASS ID NT$0 LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET ID (*) RPAREN LBRACE NT$1 statement_list RBRACE NT$2 RBRACE , {EOF }]
}
transition on RPAREN to state [19]

-------------------
lalr_state [19]: {
  [main_class ::= CLASS ID NT$0 LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET ID RPAREN (*) LBRACE NT$1 statement_list RBRACE NT$2 RBRACE , {EOF }]
}
transition on LBRACE to state [20]

-------------------
lalr_state [20]: {
  [main_class ::= CLASS ID NT$0 LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET ID RPAREN LBRACE (*) NT$1 statement_list RBRACE NT$2 RBRACE , {EOF }]
  [NT$1 ::= (*) , {IF WHILE MEGGYSETPIXEL MEGGYDELAY }]
}
transition on NT$1 to state [21]

-------------------
lalr_state [21]: {
  [statement ::= (*) IF LPAREN exp RPAREN statement , {RBRACE IF WHILE MEGGYSETPIXEL MEGGYDELAY }]
  [statement_list ::= (*) statement , {RBRACE IF WHILE MEGGYSETPIXEL MEGGYDELAY }]
  [statement ::= (*) WHILE LPAREN exp RPAREN statement , {RBRACE IF WHILE MEGGYSETPIXEL MEGGYDELAY }]
  [statement ::= (*) MEGGYDELAY LPAREN exp RPAREN SEMI , {RBRACE IF WHILE MEGGYSETPIXEL MEGGYDELAY }]
  [statement ::= (*) IF LPAREN exp RPAREN statement ELSE statement , {RBRACE IF WHILE MEGGYSETPIXEL MEGGYDELAY }]
  [main_class ::= CLASS ID NT$0 LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET ID RPAREN LBRACE NT$1 (*) statement_list RBRACE NT$2 RBRACE , {EOF }]
  [statement ::= (*) MEGGYSETPIXEL LPAREN exp COMMA exp COMMA exp RPAREN SEMI , {RBRACE IF WHILE MEGGYSETPIXEL MEGGYDELAY }]
  [statement_list ::= (*) statement_list statement , {RBRACE IF WHILE MEGGYSETPIXEL MEGGYDELAY }]
}
transition on IF to state [27]
transition on WHILE to state [26]
transition on MEGGYSETPIXEL to state [25]
transition on MEGGYDELAY to state [24]
transition on statement to state [23]
transition on statement_list to state [22]

-------------------
lalr_state [22]: {
  [statement ::= (*) IF LPAREN exp RPAREN statement , {RBRACE IF WHILE MEGGYSETPIXEL MEGGYDELAY }]
  [statement ::= (*) WHILE LPAREN exp RPAREN statement , {RBRACE IF WHILE MEGGYSETPIXEL MEGGYDELAY }]
  [statement ::= (*) MEGGYDELAY LPAREN exp RPAREN SEMI , {RBRACE IF WHILE MEGGYSETPIXEL MEGGYDELAY }]
  [main_class ::= CLASS ID NT$0 LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET ID RPAREN LBRACE NT$1 statement_list (*) RBRACE NT$2 RBRACE , {EOF }]
  [statement ::= (*) IF LPAREN exp RPAREN statement ELSE statement , {RBRACE IF WHILE MEGGYSETPIXEL MEGGYDELAY }]
  [statement_list ::= statement_list (*) statement , {RBRACE IF WHILE MEGGYSETPIXEL MEGGYDELAY }]
  [statement ::= (*) MEGGYSETPIXEL LPAREN exp COMMA exp COMMA exp RPAREN SEMI , {RBRACE IF WHILE MEGGYSETPIXEL MEGGYDELAY }]
}
transition on IF to state [27]
transition on WHILE to state [26]
transition on MEGGYSETPIXEL to state [25]
transition on MEGGYDELAY to state [24]
transition on RBRACE to state [78]
transition on statement to state [77]

-------------------
lalr_state [23]: {
  [statement_list ::= statement (*) , {RBRACE IF WHILE MEGGYSETPIXEL MEGGYDELAY }]
}

-------------------
lalr_state [24]: {
  [statement ::= MEGGYDELAY (*) LPAREN exp RPAREN SEMI , {RBRACE IF ELSE WHILE MEGGYSETPIXEL MEGGYDELAY }]
}
transition on LPAREN to state [73]

-------------------
lalr_state [25]: {
  [statement ::= MEGGYSETPIXEL (*) LPAREN exp COMMA exp COMMA exp RPAREN SEMI , {RBRACE IF ELSE WHILE MEGGYSETPIXEL MEGGYDELAY }]
}
transition on LPAREN to state [65]

-------------------
lalr_state [26]: {
  [statement ::= WHILE (*) LPAREN exp RPAREN statement , {RBRACE IF ELSE WHILE MEGGYSETPIXEL MEGGYDELAY }]
}
transition on LPAREN to state [61]

-------------------
lalr_state [27]: {
  [statement ::= IF (*) LPAREN exp RPAREN statement ELSE statement , {RBRACE IF ELSE WHILE MEGGYSETPIXEL MEGGYDELAY }]
  [statement ::= IF (*) LPAREN exp RPAREN statement , {RBRACE IF ELSE WHILE MEGGYSETPIXEL MEGGYDELAY }]
}
transition on LPAREN to state [28]

-------------------
lalr_state [28]: {
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [statement ::= IF LPAREN (*) exp RPAREN statement , {RBRACE IF ELSE WHILE MEGGYSETPIXEL MEGGYDELAY }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= (*) MEGGYGETPIXEL , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [statement ::= IF LPAREN (*) exp RPAREN statement ELSE statement , {RBRACE IF ELSE WHILE MEGGYSETPIXEL MEGGYDELAY }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= (*) MEGGYCHECKBUTTON , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= (*) FALSE , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES RPAREN EQUAL AND }]
}
transition on BUTTON_LITERAL to state [39]
transition on LPAREN to state [38]
transition on COLOR_LITERAL to state [37]
transition on NOT to state [36]
transition on MEGGYGETPIXEL to state [35]
transition on FALSE to state [34]
transition on INT_LITERAL to state [33]
transition on TRUE to state [32]
transition on exp to state [31]
transition on MEGGYCHECKBUTTON to state [30]
transition on MINUS to state [29]

-------------------
lalr_state [29]: {
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= MINUS (*) exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) MEGGYCHECKBUTTON , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) FALSE , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) MEGGYGETPIXEL , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
}
transition on BUTTON_LITERAL to state [39]
transition on LPAREN to state [38]
transition on NOT to state [36]
transition on COLOR_LITERAL to state [37]
transition on FALSE to state [34]
transition on MEGGYGETPIXEL to state [35]
transition on INT_LITERAL to state [33]
transition on exp to state [60]
transition on TRUE to state [32]
transition on MEGGYCHECKBUTTON to state [30]
transition on MINUS to state [29]

-------------------
lalr_state [30]: {
  [exp ::= MEGGYCHECKBUTTON (*) , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
}

-------------------
lalr_state [31]: {
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [statement ::= IF LPAREN exp (*) RPAREN statement ELSE statement , {RBRACE IF ELSE WHILE MEGGYSETPIXEL MEGGYDELAY }]
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= exp (*) EQUAL exp , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [statement ::= IF LPAREN exp (*) RPAREN statement , {RBRACE IF ELSE WHILE MEGGYSETPIXEL MEGGYDELAY }]
  [exp ::= exp (*) AND exp , {PLUS MINUS TIMES RPAREN EQUAL AND }]
}
transition on TIMES to state [48]
transition on MINUS to state [47]
transition on EQUAL to state [46]
transition on PLUS to state [45]
transition on AND to state [44]
transition on RPAREN to state [56]

-------------------
lalr_state [32]: {
  [exp ::= TRUE (*) , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
}

-------------------
lalr_state [33]: {
  [exp ::= INT_LITERAL (*) , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
}

-------------------
lalr_state [34]: {
  [exp ::= FALSE (*) , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
}

-------------------
lalr_state [35]: {
  [exp ::= MEGGYGETPIXEL (*) , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
}

-------------------
lalr_state [36]: {
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= NOT (*) exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) MEGGYCHECKBUTTON , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) FALSE , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) MEGGYGETPIXEL , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
}
transition on BUTTON_LITERAL to state [39]
transition on LPAREN to state [38]
transition on NOT to state [36]
transition on COLOR_LITERAL to state [37]
transition on FALSE to state [34]
transition on MEGGYGETPIXEL to state [35]
transition on INT_LITERAL to state [33]
transition on exp to state [55]
transition on TRUE to state [32]
transition on MEGGYCHECKBUTTON to state [30]
transition on MINUS to state [29]

-------------------
lalr_state [37]: {
  [exp ::= COLOR_LITERAL (*) , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
}

-------------------
lalr_state [38]: {
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= (*) MEGGYGETPIXEL , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= LPAREN (*) BYTE RPAREN exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= LPAREN (*) exp RPAREN , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= (*) MEGGYCHECKBUTTON , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= (*) FALSE , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES RPAREN EQUAL AND }]
}
transition on BUTTON_LITERAL to state [39]
transition on BYTE to state [41]
transition on LPAREN to state [38]
transition on COLOR_LITERAL to state [37]
transition on NOT to state [36]
transition on MEGGYGETPIXEL to state [35]
transition on FALSE to state [34]
transition on INT_LITERAL to state [33]
transition on TRUE to state [32]
transition on exp to state [40]
transition on MEGGYCHECKBUTTON to state [30]
transition on MINUS to state [29]

-------------------
lalr_state [39]: {
  [exp ::= BUTTON_LITERAL (*) , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
}

-------------------
lalr_state [40]: {
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= LPAREN exp (*) RPAREN , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= exp (*) EQUAL exp , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= exp (*) AND exp , {PLUS MINUS TIMES RPAREN EQUAL AND }]
}
transition on TIMES to state [48]
transition on MINUS to state [47]
transition on EQUAL to state [46]
transition on PLUS to state [45]
transition on AND to state [44]
transition on RPAREN to state [54]

-------------------
lalr_state [41]: {
  [exp ::= LPAREN BYTE (*) RPAREN exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
}
transition on RPAREN to state [42]

-------------------
lalr_state [42]: {
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= LPAREN BYTE RPAREN (*) exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) MEGGYCHECKBUTTON , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) FALSE , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) MEGGYGETPIXEL , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
}
transition on BUTTON_LITERAL to state [39]
transition on LPAREN to state [38]
transition on NOT to state [36]
transition on COLOR_LITERAL to state [37]
transition on FALSE to state [34]
transition on MEGGYGETPIXEL to state [35]
transition on INT_LITERAL to state [33]
transition on exp to state [43]
transition on TRUE to state [32]
transition on MEGGYCHECKBUTTON to state [30]
transition on MINUS to state [29]

-------------------
lalr_state [43]: {
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= exp (*) EQUAL exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= LPAREN BYTE RPAREN exp (*) , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= exp (*) AND exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
}
transition on TIMES to state [48]
transition on MINUS to state [47]
transition on EQUAL to state [46]
transition on PLUS to state [45]
transition on AND to state [44]

-------------------
lalr_state [44]: {
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= exp AND (*) exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) MEGGYCHECKBUTTON , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) FALSE , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) MEGGYGETPIXEL , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
}
transition on BUTTON_LITERAL to state [39]
transition on LPAREN to state [38]
transition on NOT to state [36]
transition on COLOR_LITERAL to state [37]
transition on FALSE to state [34]
transition on MEGGYGETPIXEL to state [35]
transition on INT_LITERAL to state [33]
transition on exp to state [53]
transition on TRUE to state [32]
transition on MEGGYCHECKBUTTON to state [30]
transition on MINUS to state [29]

-------------------
lalr_state [45]: {
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= exp PLUS (*) exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) MEGGYCHECKBUTTON , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) FALSE , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) MEGGYGETPIXEL , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
}
transition on BUTTON_LITERAL to state [39]
transition on LPAREN to state [38]
transition on NOT to state [36]
transition on COLOR_LITERAL to state [37]
transition on FALSE to state [34]
transition on MEGGYGETPIXEL to state [35]
transition on INT_LITERAL to state [33]
transition on exp to state [52]
transition on TRUE to state [32]
transition on MEGGYCHECKBUTTON to state [30]
transition on MINUS to state [29]

-------------------
lalr_state [46]: {
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) MEGGYCHECKBUTTON , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) FALSE , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) MEGGYGETPIXEL , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= exp EQUAL (*) exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
}
transition on BUTTON_LITERAL to state [39]
transition on LPAREN to state [38]
transition on NOT to state [36]
transition on COLOR_LITERAL to state [37]
transition on FALSE to state [34]
transition on MEGGYGETPIXEL to state [35]
transition on INT_LITERAL to state [33]
transition on exp to state [51]
transition on TRUE to state [32]
transition on MEGGYCHECKBUTTON to state [30]
transition on MINUS to state [29]

-------------------
lalr_state [47]: {
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= exp MINUS (*) exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) MEGGYCHECKBUTTON , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) FALSE , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) MEGGYGETPIXEL , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
}
transition on BUTTON_LITERAL to state [39]
transition on LPAREN to state [38]
transition on NOT to state [36]
transition on COLOR_LITERAL to state [37]
transition on FALSE to state [34]
transition on MEGGYGETPIXEL to state [35]
transition on INT_LITERAL to state [33]
transition on exp to state [50]
transition on TRUE to state [32]
transition on MEGGYCHECKBUTTON to state [30]
transition on MINUS to state [29]

-------------------
lalr_state [48]: {
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) MEGGYCHECKBUTTON , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) FALSE , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= exp TIMES (*) exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) MEGGYGETPIXEL , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
}
transition on BUTTON_LITERAL to state [39]
transition on LPAREN to state [38]
transition on NOT to state [36]
transition on COLOR_LITERAL to state [37]
transition on FALSE to state [34]
transition on MEGGYGETPIXEL to state [35]
transition on INT_LITERAL to state [33]
transition on exp to state [49]
transition on TRUE to state [32]
transition on MEGGYCHECKBUTTON to state [30]
transition on MINUS to state [29]

-------------------
lalr_state [49]: {
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= exp TIMES exp (*) , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= exp (*) EQUAL exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= exp (*) AND exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
}
transition on TIMES to state [48]
transition on MINUS to state [47]
transition on EQUAL to state [46]
transition on PLUS to state [45]
transition on AND to state [44]

-------------------
lalr_state [50]: {
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= exp (*) EQUAL exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= exp MINUS exp (*) , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= exp (*) AND exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
}
transition on TIMES to state [48]
transition on MINUS to state [47]
transition on EQUAL to state [46]
transition on PLUS to state [45]
transition on AND to state [44]

-------------------
lalr_state [51]: {
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= exp EQUAL exp (*) , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= exp (*) EQUAL exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= exp (*) AND exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
}
transition on TIMES to state [48]
transition on MINUS to state [47]
transition on EQUAL to state [46]
transition on PLUS to state [45]
transition on AND to state [44]

-------------------
lalr_state [52]: {
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= exp (*) EQUAL exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= exp (*) AND exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= exp PLUS exp (*) , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
}
transition on TIMES to state [48]
transition on MINUS to state [47]
transition on EQUAL to state [46]
transition on PLUS to state [45]
transition on AND to state [44]

-------------------
lalr_state [53]: {
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= exp (*) EQUAL exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= exp AND exp (*) , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= exp (*) AND exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
}
transition on TIMES to state [48]
transition on MINUS to state [47]
transition on EQUAL to state [46]
transition on PLUS to state [45]
transition on AND to state [44]

-------------------
lalr_state [54]: {
  [exp ::= LPAREN exp RPAREN (*) , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
}

-------------------
lalr_state [55]: {
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= exp (*) EQUAL exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= NOT exp (*) , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= exp (*) AND exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
}
transition on TIMES to state [48]
transition on MINUS to state [47]
transition on EQUAL to state [46]
transition on PLUS to state [45]
transition on AND to state [44]

-------------------
lalr_state [56]: {
  [statement ::= (*) IF LPAREN exp RPAREN statement , {RBRACE IF ELSE WHILE MEGGYSETPIXEL MEGGYDELAY }]
  [statement ::= (*) WHILE LPAREN exp RPAREN statement , {RBRACE IF ELSE WHILE MEGGYSETPIXEL MEGGYDELAY }]
  [statement ::= IF LPAREN exp RPAREN (*) statement ELSE statement , {RBRACE IF ELSE WHILE MEGGYSETPIXEL MEGGYDELAY }]
  [statement ::= (*) MEGGYDELAY LPAREN exp RPAREN SEMI , {RBRACE IF ELSE WHILE MEGGYSETPIXEL MEGGYDELAY }]
  [statement ::= (*) IF LPAREN exp RPAREN statement ELSE statement , {RBRACE IF ELSE WHILE MEGGYSETPIXEL MEGGYDELAY }]
  [statement ::= IF LPAREN exp RPAREN (*) statement , {RBRACE IF ELSE WHILE MEGGYSETPIXEL MEGGYDELAY }]
  [statement ::= (*) MEGGYSETPIXEL LPAREN exp COMMA exp COMMA exp RPAREN SEMI , {RBRACE IF ELSE WHILE MEGGYSETPIXEL MEGGYDELAY }]
}
transition on IF to state [27]
transition on WHILE to state [26]
transition on MEGGYSETPIXEL to state [25]
transition on MEGGYDELAY to state [24]
transition on statement to state [57]

-------------------
lalr_state [57]: {
  [statement ::= IF LPAREN exp RPAREN statement (*) ELSE statement , {RBRACE IF ELSE WHILE MEGGYSETPIXEL MEGGYDELAY }]
  [statement ::= IF LPAREN exp RPAREN statement (*) , {RBRACE IF ELSE WHILE MEGGYSETPIXEL MEGGYDELAY }]
}
transition on ELSE to state [58]

-------------------
lalr_state [58]: {
  [statement ::= (*) IF LPAREN exp RPAREN statement , {RBRACE IF ELSE WHILE MEGGYSETPIXEL MEGGYDELAY }]
  [statement ::= IF LPAREN exp RPAREN statement ELSE (*) statement , {RBRACE IF ELSE WHILE MEGGYSETPIXEL MEGGYDELAY }]
  [statement ::= (*) WHILE LPAREN exp RPAREN statement , {RBRACE IF ELSE WHILE MEGGYSETPIXEL MEGGYDELAY }]
  [statement ::= (*) MEGGYDELAY LPAREN exp RPAREN SEMI , {RBRACE IF ELSE WHILE MEGGYSETPIXEL MEGGYDELAY }]
  [statement ::= (*) IF LPAREN exp RPAREN statement ELSE statement , {RBRACE IF ELSE WHILE MEGGYSETPIXEL MEGGYDELAY }]
  [statement ::= (*) MEGGYSETPIXEL LPAREN exp COMMA exp COMMA exp RPAREN SEMI , {RBRACE IF ELSE WHILE MEGGYSETPIXEL MEGGYDELAY }]
}
transition on IF to state [27]
transition on WHILE to state [26]
transition on MEGGYSETPIXEL to state [25]
transition on MEGGYDELAY to state [24]
transition on statement to state [59]

-------------------
lalr_state [59]: {
  [statement ::= IF LPAREN exp RPAREN statement ELSE statement (*) , {RBRACE IF ELSE WHILE MEGGYSETPIXEL MEGGYDELAY }]
}

-------------------
lalr_state [60]: {
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= exp (*) EQUAL exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= MINUS exp (*) , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
  [exp ::= exp (*) AND exp , {PLUS MINUS TIMES RPAREN EQUAL AND COMMA }]
}
transition on TIMES to state [48]
transition on MINUS to state [47]
transition on EQUAL to state [46]
transition on PLUS to state [45]
transition on AND to state [44]

-------------------
lalr_state [61]: {
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= (*) MEGGYCHECKBUTTON , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [statement ::= WHILE LPAREN (*) exp RPAREN statement , {RBRACE IF ELSE WHILE MEGGYSETPIXEL MEGGYDELAY }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= (*) FALSE , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= (*) MEGGYGETPIXEL , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES RPAREN EQUAL AND }]
}
transition on BUTTON_LITERAL to state [39]
transition on LPAREN to state [38]
transition on NOT to state [36]
transition on COLOR_LITERAL to state [37]
transition on FALSE to state [34]
transition on MEGGYGETPIXEL to state [35]
transition on INT_LITERAL to state [33]
transition on exp to state [62]
transition on TRUE to state [32]
transition on MEGGYCHECKBUTTON to state [30]
transition on MINUS to state [29]

-------------------
lalr_state [62]: {
  [statement ::= WHILE LPAREN exp (*) RPAREN statement , {RBRACE IF ELSE WHILE MEGGYSETPIXEL MEGGYDELAY }]
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= exp (*) EQUAL exp , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= exp (*) AND exp , {PLUS MINUS TIMES RPAREN EQUAL AND }]
}
transition on TIMES to state [48]
transition on MINUS to state [47]
transition on EQUAL to state [46]
transition on PLUS to state [45]
transition on AND to state [44]
transition on RPAREN to state [63]

-------------------
lalr_state [63]: {
  [statement ::= (*) IF LPAREN exp RPAREN statement , {RBRACE IF ELSE WHILE MEGGYSETPIXEL MEGGYDELAY }]
  [statement ::= (*) WHILE LPAREN exp RPAREN statement , {RBRACE IF ELSE WHILE MEGGYSETPIXEL MEGGYDELAY }]
  [statement ::= (*) MEGGYDELAY LPAREN exp RPAREN SEMI , {RBRACE IF ELSE WHILE MEGGYSETPIXEL MEGGYDELAY }]
  [statement ::= (*) IF LPAREN exp RPAREN statement ELSE statement , {RBRACE IF ELSE WHILE MEGGYSETPIXEL MEGGYDELAY }]
  [statement ::= (*) MEGGYSETPIXEL LPAREN exp COMMA exp COMMA exp RPAREN SEMI , {RBRACE IF ELSE WHILE MEGGYSETPIXEL MEGGYDELAY }]
  [statement ::= WHILE LPAREN exp RPAREN (*) statement , {RBRACE IF ELSE WHILE MEGGYSETPIXEL MEGGYDELAY }]
}
transition on IF to state [27]
transition on WHILE to state [26]
transition on MEGGYSETPIXEL to state [25]
transition on MEGGYDELAY to state [24]
transition on statement to state [64]

-------------------
lalr_state [64]: {
  [statement ::= WHILE LPAREN exp RPAREN statement (*) , {RBRACE IF ELSE WHILE MEGGYSETPIXEL MEGGYDELAY }]
}

-------------------
lalr_state [65]: {
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES EQUAL AND COMMA }]
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES EQUAL AND COMMA }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES EQUAL AND COMMA }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES EQUAL AND COMMA }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES EQUAL AND COMMA }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES EQUAL AND COMMA }]
  [exp ::= (*) MEGGYCHECKBUTTON , {PLUS MINUS TIMES EQUAL AND COMMA }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES EQUAL AND COMMA }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES EQUAL AND COMMA }]
  [exp ::= (*) FALSE , {PLUS MINUS TIMES EQUAL AND COMMA }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES EQUAL AND COMMA }]
  [exp ::= (*) MEGGYGETPIXEL , {PLUS MINUS TIMES EQUAL AND COMMA }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES EQUAL AND COMMA }]
  [statement ::= MEGGYSETPIXEL LPAREN (*) exp COMMA exp COMMA exp RPAREN SEMI , {RBRACE IF ELSE WHILE MEGGYSETPIXEL MEGGYDELAY }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES EQUAL AND COMMA }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES EQUAL AND COMMA }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES EQUAL AND COMMA }]
}
transition on BUTTON_LITERAL to state [39]
transition on LPAREN to state [38]
transition on NOT to state [36]
transition on COLOR_LITERAL to state [37]
transition on FALSE to state [34]
transition on MEGGYGETPIXEL to state [35]
transition on INT_LITERAL to state [33]
transition on exp to state [66]
transition on TRUE to state [32]
transition on MEGGYCHECKBUTTON to state [30]
transition on MINUS to state [29]

-------------------
lalr_state [66]: {
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES EQUAL AND COMMA }]
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES EQUAL AND COMMA }]
  [exp ::= exp (*) EQUAL exp , {PLUS MINUS TIMES EQUAL AND COMMA }]
  [statement ::= MEGGYSETPIXEL LPAREN exp (*) COMMA exp COMMA exp RPAREN SEMI , {RBRACE IF ELSE WHILE MEGGYSETPIXEL MEGGYDELAY }]
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES EQUAL AND COMMA }]
  [exp ::= exp (*) AND exp , {PLUS MINUS TIMES EQUAL AND COMMA }]
}
transition on TIMES to state [48]
transition on MINUS to state [47]
transition on EQUAL to state [46]
transition on PLUS to state [45]
transition on AND to state [44]
transition on COMMA to state [67]

-------------------
lalr_state [67]: {
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES EQUAL AND COMMA }]
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES EQUAL AND COMMA }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES EQUAL AND COMMA }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES EQUAL AND COMMA }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES EQUAL AND COMMA }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES EQUAL AND COMMA }]
  [exp ::= (*) MEGGYCHECKBUTTON , {PLUS MINUS TIMES EQUAL AND COMMA }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES EQUAL AND COMMA }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES EQUAL AND COMMA }]
  [exp ::= (*) FALSE , {PLUS MINUS TIMES EQUAL AND COMMA }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES EQUAL AND COMMA }]
  [exp ::= (*) MEGGYGETPIXEL , {PLUS MINUS TIMES EQUAL AND COMMA }]
  [statement ::= MEGGYSETPIXEL LPAREN exp COMMA (*) exp COMMA exp RPAREN SEMI , {RBRACE IF ELSE WHILE MEGGYSETPIXEL MEGGYDELAY }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES EQUAL AND COMMA }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES EQUAL AND COMMA }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES EQUAL AND COMMA }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES EQUAL AND COMMA }]
}
transition on BUTTON_LITERAL to state [39]
transition on LPAREN to state [38]
transition on NOT to state [36]
transition on COLOR_LITERAL to state [37]
transition on FALSE to state [34]
transition on MEGGYGETPIXEL to state [35]
transition on INT_LITERAL to state [33]
transition on exp to state [68]
transition on TRUE to state [32]
transition on MEGGYCHECKBUTTON to state [30]
transition on MINUS to state [29]

-------------------
lalr_state [68]: {
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES EQUAL AND COMMA }]
  [statement ::= MEGGYSETPIXEL LPAREN exp COMMA exp (*) COMMA exp RPAREN SEMI , {RBRACE IF ELSE WHILE MEGGYSETPIXEL MEGGYDELAY }]
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES EQUAL AND COMMA }]
  [exp ::= exp (*) EQUAL exp , {PLUS MINUS TIMES EQUAL AND COMMA }]
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES EQUAL AND COMMA }]
  [exp ::= exp (*) AND exp , {PLUS MINUS TIMES EQUAL AND COMMA }]
}
transition on TIMES to state [48]
transition on MINUS to state [47]
transition on EQUAL to state [46]
transition on PLUS to state [45]
transition on AND to state [44]
transition on COMMA to state [69]

-------------------
lalr_state [69]: {
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= (*) MEGGYCHECKBUTTON , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [statement ::= MEGGYSETPIXEL LPAREN exp COMMA exp COMMA (*) exp RPAREN SEMI , {RBRACE IF ELSE WHILE MEGGYSETPIXEL MEGGYDELAY }]
  [exp ::= (*) FALSE , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= (*) MEGGYGETPIXEL , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES RPAREN EQUAL AND }]
}
transition on BUTTON_LITERAL to state [39]
transition on LPAREN to state [38]
transition on NOT to state [36]
transition on COLOR_LITERAL to state [37]
transition on FALSE to state [34]
transition on MEGGYGETPIXEL to state [35]
transition on INT_LITERAL to state [33]
transition on exp to state [70]
transition on TRUE to state [32]
transition on MEGGYCHECKBUTTON to state [30]
transition on MINUS to state [29]

-------------------
lalr_state [70]: {
  [statement ::= MEGGYSETPIXEL LPAREN exp COMMA exp COMMA exp (*) RPAREN SEMI , {RBRACE IF ELSE WHILE MEGGYSETPIXEL MEGGYDELAY }]
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= exp (*) EQUAL exp , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= exp (*) AND exp , {PLUS MINUS TIMES RPAREN EQUAL AND }]
}
transition on TIMES to state [48]
transition on MINUS to state [47]
transition on EQUAL to state [46]
transition on PLUS to state [45]
transition on AND to state [44]
transition on RPAREN to state [71]

-------------------
lalr_state [71]: {
  [statement ::= MEGGYSETPIXEL LPAREN exp COMMA exp COMMA exp RPAREN (*) SEMI , {RBRACE IF ELSE WHILE MEGGYSETPIXEL MEGGYDELAY }]
}
transition on SEMI to state [72]

-------------------
lalr_state [72]: {
  [statement ::= MEGGYSETPIXEL LPAREN exp COMMA exp COMMA exp RPAREN SEMI (*) , {RBRACE IF ELSE WHILE MEGGYSETPIXEL MEGGYDELAY }]
}

-------------------
lalr_state [73]: {
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= (*) MEGGYCHECKBUTTON , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [statement ::= MEGGYDELAY LPAREN (*) exp RPAREN SEMI , {RBRACE IF ELSE WHILE MEGGYSETPIXEL MEGGYDELAY }]
  [exp ::= (*) FALSE , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= (*) MEGGYGETPIXEL , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES RPAREN EQUAL AND }]
}
transition on BUTTON_LITERAL to state [39]
transition on LPAREN to state [38]
transition on NOT to state [36]
transition on COLOR_LITERAL to state [37]
transition on FALSE to state [34]
transition on MEGGYGETPIXEL to state [35]
transition on INT_LITERAL to state [33]
transition on exp to state [74]
transition on TRUE to state [32]
transition on MEGGYCHECKBUTTON to state [30]
transition on MINUS to state [29]

-------------------
lalr_state [74]: {
  [statement ::= MEGGYDELAY LPAREN exp (*) RPAREN SEMI , {RBRACE IF ELSE WHILE MEGGYSETPIXEL MEGGYDELAY }]
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= exp (*) EQUAL exp , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES RPAREN EQUAL AND }]
  [exp ::= exp (*) AND exp , {PLUS MINUS TIMES RPAREN EQUAL AND }]
}
transition on TIMES to state [48]
transition on MINUS to state [47]
transition on EQUAL to state [46]
transition on PLUS to state [45]
transition on AND to state [44]
transition on RPAREN to state [75]

-------------------
lalr_state [75]: {
  [statement ::= MEGGYDELAY LPAREN exp RPAREN (*) SEMI , {RBRACE IF ELSE WHILE MEGGYSETPIXEL MEGGYDELAY }]
}
transition on SEMI to state [76]

-------------------
lalr_state [76]: {
  [statement ::= MEGGYDELAY LPAREN exp RPAREN SEMI (*) , {RBRACE IF ELSE WHILE MEGGYSETPIXEL MEGGYDELAY }]
}

-------------------
lalr_state [77]: {
  [statement_list ::= statement_list statement (*) , {RBRACE IF WHILE MEGGYSETPIXEL MEGGYDELAY }]
}

-------------------
lalr_state [78]: {
  [NT$2 ::= (*) , {RBRACE }]
  [main_class ::= CLASS ID NT$0 LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET ID RPAREN LBRACE NT$1 statement_list RBRACE (*) NT$2 RBRACE , {EOF }]
}
transition on NT$2 to state [79]

-------------------
lalr_state [79]: {
  [main_class ::= CLASS ID NT$0 LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET ID RPAREN LBRACE NT$1 statement_list RBRACE NT$2 (*) RBRACE , {EOF }]
}
transition on RBRACE to state [80]

-------------------
lalr_state [80]: {
  [main_class ::= CLASS ID NT$0 LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET ID RPAREN LBRACE NT$1 statement_list RBRACE NT$2 RBRACE (*) , {EOF }]
}

-------------------
lalr_state [81]: {
  [$START ::= program EOF (*) , {EOF }]
}

-------------------
------- CUP v0.11a beta 20060608 Parser Generation Summary -------
  1 error and 47 warnings
  55 terminals, 8 non-terminals, and 29 productions declared, 
  producing 82 unique parse states.
  17 terminals declared but not used.
  0 non-terminals declared but not used.
  0 productions never reduced.
  29 conflicts detected (0 expected).
  No code produced.
---------------------------------------------------- (v0.11a beta 20060608)
