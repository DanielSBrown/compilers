
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Oct 23 20:47:32 EDT 2017
//----------------------------------------------------

package mjparser;

import java_cup.runtime.*;
import java.util.*;
import java.io.PrintWriter;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileNotFoundException;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Oct 23 20:47:32 EDT 2017
  */
public class mj extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public mj() {super();}

  /** Constructor which sets the default scanner. */
  public mj(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public mj(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\037\000\002\002\004\000\002\002\006\000\002\010" +
    "\002\000\002\011\002\000\002\012\002\000\002\006\026" +
    "\000\002\007\011\000\002\004\005\000\002\004\013\000" +
    "\002\004\007\000\002\004\007\000\002\004\011\000\002" +
    "\004\007\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\006" +
    "\000\002\003\004\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\004\000\002\003" +
    "\005\000\002\005\003\000\002\005\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\144\000\004\017\005\001\002\000\004\002\146\001" +
    "\002\000\004\046\006\001\002\000\004\044\007\001\002" +
    "\000\004\037\010\001\002\000\004\061\012\001\002\000" +
    "\004\002\000\001\002\000\004\011\uffff\001\002\000\004" +
    "\011\014\001\002\000\004\032\015\001\002\000\004\034" +
    "\016\001\002\000\004\036\017\001\002\000\004\016\020" +
    "\001\002\000\004\007\021\001\002\000\004\035\022\001" +
    "\002\000\004\041\023\001\002\000\004\042\024\001\002" +
    "\000\004\061\025\001\002\000\004\010\026\001\002\000" +
    "\004\011\027\001\002\000\014\011\ufffe\020\ufffe\026\ufffe" +
    "\052\ufffe\055\ufffe\001\002\000\014\011\032\020\037\026" +
    "\035\052\036\055\034\001\002\000\016\011\032\012\143" +
    "\020\037\026\035\052\036\055\034\001\002\000\014\011" +
    "\032\020\037\026\035\052\036\055\034\001\002\000\016" +
    "\011\uffe4\012\uffe4\020\uffe4\026\uffe4\052\uffe4\055\uffe4\001" +
    "\002\000\004\007\134\001\002\000\004\007\130\001\002" +
    "\000\004\007\120\001\002\000\004\007\040\001\002\000" +
    "\026\005\041\007\052\025\050\056\047\057\042\060\045" +
    "\062\044\063\046\064\051\065\053\001\002\000\026\005" +
    "\041\007\052\025\050\056\047\057\042\060\045\062\044" +
    "\063\046\064\051\065\053\001\002\000\020\004\uffec\005" +
    "\uffec\006\uffec\010\uffec\023\uffec\024\uffec\027\uffec\001\002" +
    "\000\016\004\061\005\063\006\064\010\074\023\062\024" +
    "\060\001\002\000\020\004\uffe8\005\uffe8\006\uffe8\010\uffe8" +
    "\023\uffe8\024\uffe8\027\uffe8\001\002\000\020\004\uffeb\005" +
    "\uffeb\006\uffeb\010\uffeb\023\uffeb\024\uffeb\027\uffeb\001\002" +
    "\000\020\004\uffe7\005\uffe7\006\uffe7\010\uffe7\023\uffe7\024" +
    "\uffe7\027\uffe7\001\002\000\020\004\uffed\005\uffed\006\uffed" +
    "\010\uffed\023\uffed\024\uffed\027\uffed\001\002\000\026\005" +
    "\041\007\052\025\050\056\047\057\042\060\045\062\044" +
    "\063\046\064\051\065\053\001\002\000\020\004\uffea\005" +
    "\uffea\006\uffea\010\uffea\023\uffea\024\uffea\027\uffea\001\002" +
    "\000\030\005\041\007\052\015\055\025\050\056\047\057" +
    "\042\060\045\062\044\063\046\064\051\065\053\001\002" +
    "\000\020\004\uffe9\005\uffe9\006\uffe9\010\uffe9\023\uffe9\024" +
    "\uffe9\027\uffe9\001\002\000\016\004\061\005\063\006\064" +
    "\010\072\023\062\024\060\001\002\000\004\010\056\001" +
    "\002\000\026\005\041\007\052\025\050\056\047\057\042" +
    "\060\045\062\044\063\046\064\051\065\053\001\002\000" +
    "\020\004\061\005\063\006\064\010\uffef\023\062\024\060" +
    "\027\uffef\001\002\000\026\005\041\007\052\025\050\056" +
    "\047\057\042\060\045\062\044\063\046\064\051\065\053" +
    "\001\002\000\026\005\041\007\052\025\050\056\047\057" +
    "\042\060\045\062\044\063\046\064\051\065\053\001\002" +
    "\000\026\005\041\007\052\025\050\056\047\057\042\060" +
    "\045\062\044\063\046\064\051\065\053\001\002\000\026" +
    "\005\041\007\052\025\050\056\047\057\042\060\045\062" +
    "\044\063\046\064\051\065\053\001\002\000\026\005\041" +
    "\007\052\025\050\056\047\057\042\060\045\062\044\063" +
    "\046\064\051\065\053\001\002\000\020\004\ufff0\005\ufff0" +
    "\006\ufff0\010\ufff0\023\ufff0\024\ufff0\027\ufff0\001\002\000" +
    "\020\004\ufff1\005\ufff1\006\064\010\ufff1\023\062\024\060" +
    "\027\ufff1\001\002\000\020\004\ufff3\005\ufff3\006\064\010" +
    "\ufff3\023\ufff3\024\ufff3\027\ufff3\001\002\000\020\004\ufff2" +
    "\005\ufff2\006\064\010\ufff2\023\062\024\060\027\ufff2\001" +
    "\002\000\020\004\ufff4\005\ufff4\006\064\010\ufff4\023\ufff4" +
    "\024\ufff4\027\ufff4\001\002\000\020\004\uffe5\005\uffe5\006" +
    "\uffe5\010\uffe5\023\uffe5\024\uffe5\027\uffe5\001\002\000\020" +
    "\004\061\005\063\006\064\010\uffe6\023\062\024\060\027" +
    "\uffe6\001\002\000\014\011\032\020\077\026\035\052\036" +
    "\055\034\001\002\000\004\021\115\001\002\000\016\011" +
    "\ufff7\012\ufff7\020\ufff7\026\ufff7\052\ufff7\055\ufff7\001\002" +
    "\000\004\007\100\001\002\000\026\005\041\007\052\025" +
    "\050\056\047\057\042\060\045\062\044\063\046\064\051" +
    "\065\053\001\002\000\016\004\061\005\063\006\064\010" +
    "\102\023\062\024\060\001\002\000\014\011\032\020\077" +
    "\026\035\052\036\055\034\001\002\000\004\021\104\001" +
    "\002\000\004\020\106\001\002\000\020\011\ufff6\012\ufff6" +
    "\020\ufff6\021\ufffb\026\ufff6\052\ufff6\055\ufff6\001\002\000" +
    "\004\007\107\001\002\000\026\005\041\007\052\025\050" +
    "\056\047\057\042\060\045\062\044\063\046\064\051\065" +
    "\053\001\002\000\016\004\061\005\063\006\064\010\111" +
    "\023\062\024\060\001\002\000\004\020\106\001\002\000" +
    "\004\021\113\001\002\000\004\020\106\001\002\000\020" +
    "\011\ufffb\012\ufffb\020\ufffb\021\ufffb\026\ufffb\052\ufffb\055" +
    "\ufffb\001\002\000\004\020\106\001\002\000\016\011\ufff6" +
    "\012\ufff6\020\ufff6\026\ufff6\052\ufff6\055\ufff6\001\002\000" +
    "\020\004\uffee\005\uffee\006\064\010\uffee\023\062\024\060" +
    "\027\uffee\001\002\000\026\005\041\007\052\025\050\056" +
    "\047\057\042\060\045\062\044\063\046\064\051\065\053" +
    "\001\002\000\016\004\061\005\063\006\064\023\062\024" +
    "\060\027\122\001\002\000\026\005\041\007\052\025\050" +
    "\056\047\057\042\060\045\062\044\063\046\064\051\065" +
    "\053\001\002\000\016\004\061\005\063\006\064\023\062" +
    "\024\060\027\124\001\002\000\026\005\041\007\052\025" +
    "\050\056\047\057\042\060\045\062\044\063\046\064\051" +
    "\065\053\001\002\000\016\004\061\005\063\006\064\010" +
    "\126\023\062\024\060\001\002\000\004\044\127\001\002" +
    "\000\016\011\ufff9\012\ufff9\020\ufff9\026\ufff9\052\ufff9\055" +
    "\ufff9\001\002\000\026\005\041\007\052\025\050\056\047" +
    "\057\042\060\045\062\044\063\046\064\051\065\053\001" +
    "\002\000\016\004\061\005\063\006\064\010\132\023\062" +
    "\024\060\001\002\000\014\011\032\020\037\026\035\052" +
    "\036\055\034\001\002\000\016\011\ufff5\012\ufff5\020\ufff5" +
    "\026\ufff5\052\ufff5\055\ufff5\001\002\000\026\005\041\007" +
    "\052\025\050\056\047\057\042\060\045\062\044\063\046" +
    "\064\051\065\053\001\002\000\016\004\061\005\063\006" +
    "\064\010\136\023\062\024\060\001\002\000\004\044\137" +
    "\001\002\000\016\011\ufff8\012\ufff8\020\ufff8\026\ufff8\052" +
    "\ufff8\055\ufff8\001\002\000\016\011\032\012\142\020\037" +
    "\026\035\052\036\055\034\001\002\000\016\011\uffe3\012" +
    "\uffe3\020\uffe3\026\uffe3\052\uffe3\055\uffe3\001\002\000\016" +
    "\011\ufffa\012\ufffa\020\ufffa\026\ufffa\052\ufffa\055\ufffa\001" +
    "\002\000\004\012\ufffd\001\002\000\004\012\145\001\002" +
    "\000\004\002\ufffc\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\144\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\027\001\001\000\006\004\032\005\030\001\001\000\004" +
    "\004\140\001\001\000\006\004\032\005\137\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\042\001\001\000" +
    "\004\003\116\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\072\001\001\000\002\001\001" +
    "\000\004\003\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\056\001\001\000\002" +
    "\001\001\000\004\003\070\001\001\000\004\003\067\001" +
    "\001\000\004\003\066\001\001\000\004\003\065\001\001" +
    "\000\004\003\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\075\007" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\100\001\001\000\002\001\001\000" +
    "\006\004\075\007\102\001\001\000\002\001\001\000\004" +
    "\007\104\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\107\001\001\000\002\001\001\000\004\007\111" +
    "\001\001\000\002\001\001\000\004\007\113\001\001\000" +
    "\002\001\001\000\004\007\115\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\120\001\001\000\002\001" +
    "\001\000\004\003\122\001\001\000\002\001\001\000\004" +
    "\003\124\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\130\001\001\000\002\001\001" +
    "\000\004\004\132\001\001\000\002\001\001\000\004\003" +
    "\134\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\140\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\143\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$mj$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$mj$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$mj$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public PrintWriter out;

    public String programName;

    public void unrecovered_syntax_error(Symbol cur_SymbolValue) {
        report_fatal_error("Fatal syntax error", cur_SymbolValue);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        done_parsing();
        Symbol SymbolValue = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)SymbolValue.value;
        throw new mjparser.ParseException("Fatal parsing error",
                                          tok.line, tok.pos);
    }

    public void report_error(String message, Object info) {
        Symbol SymbolValue = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)SymbolValue.value;
        System.err.println("[" + tok.line + "," + tok.pos + "] "
                               + message + " at " + tok.toString() );
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$mj$actions {
  private final mj parser;

  /** Constructor */
  CUP$mj$actions(mj parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$mj$do_action(
    int                        CUP$mj$act_num,
    java_cup.runtime.lr_parser CUP$mj$parser,
    java.util.Stack            CUP$mj$stack,
    int                        CUP$mj$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$mj$result;

      /* select the action based on the action number */
      switch (CUP$mj$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement_list ::= statement_list statement 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;

              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement_list",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement_list ::= statement 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;

              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement_list",3, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp ::= LPAREN exp RPAREN 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp ::= NOT exp 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exp ::= FALSE 
            {
              Integer RESULT =null;
		 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // exp ::= TRUE 
            {
              Integer RESULT =null;
		 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // exp ::= BUTTON_LITERAL 
            {
              Integer RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue b = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = b.value; 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // exp ::= COLOR_LITERAL 
            {
              Integer RESULT =null;
		int colorleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue color = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = color.value; 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // exp ::= INT_LITERAL 
            {
              Integer RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue i = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = i.value; 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // exp ::= MEGGYCHECKBUTTON 
            {
              Integer RESULT =null;
		 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // exp ::= MEGGYGETPIXEL 
            {
              Integer RESULT =null;
		 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // exp ::= MINUS exp 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		  
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // exp ::= LPAREN BYTE RPAREN exp 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = e; 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // exp ::= exp TIMES exp 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // exp ::= exp MINUS exp 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // exp ::= exp PLUS exp 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // exp ::= exp EQUAL exp 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // exp ::= exp AND exp 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= WHILE LPAREN exp RPAREN statement 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		

          
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= IF LPAREN exp RPAREN if_stmt ELSE if_stmt 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		

          
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= IF LPAREN exp RPAREN statement 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		

          
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= MEGGYDELAY LPAREN exp RPAREN SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		

          
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= MEGGYSETPIXEL LPAREN exp COMMA exp COMMA exp RPAREN SEMI 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		Integer color = (Integer)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		

          
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= LBRACE statement_list RBRACE 
            {
              Object RESULT =null;

              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // if_stmt ::= IF LPAREN exp RPAREN if_stmt ELSE if_stmt 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		

      
              CUP$mj$result = parser.getSymbolFactory().newSymbol("if_stmt",5, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // main_class ::= CLASS ID NT$0 LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET ID RPAREN LBRACE NT$1 statement_list RBRACE NT$2 RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-18)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-18)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-18)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-7)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-7)).right;
		SymbolValue param = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-7)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		
            //Epilogue
            System.out.println("Generate epilogue using avrF.rtl.s");
            InputStream mainEpilogue=null;
            BufferedReader reader=null;
          //  parser.out.println("This is a test");
            try {
                // The syntax for loading a text resource file
                // from a jar file here:
                // http://www.rgagnon.com/javadetails/java-0077.html
                mainEpilogue
                    = this.getClass().getClassLoader().getResourceAsStream(
                        "avrF.rtl.s");
                reader = new BufferedReader(new
                    InputStreamReader(mainEpilogue));

                String line = null;
                while ((line = reader.readLine()) != null) {
                  parser.out.println(line);
                }
            } catch ( Exception e2) {
                e2.printStackTrace();
            }
            finally{
                try{
                    if(mainEpilogue!=null) mainEpilogue.close();
                    if(reader!=null) reader.close();
                }
                catch (IOException e) {
                   e.printStackTrace();
                }
            }

            parser.out.flush();
          
              CUP$mj$result = parser.getSymbolFactory().newSymbol("main_class",4, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-19)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-16)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-16)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-16)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		SymbolValue param = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;

            //currently prints null, commenting out to not ruin assembly file
          //parser.out.println(list);
          
              CUP$mj$result = parser.getSymbolFactory().newSymbol("NT$2",8, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-12)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-13)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-13)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-13)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue param = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;

            System.out.println("Generate prolog using avrH.rtl.s");
            InputStream mainPrologue=null;
            BufferedReader reader=null;
          //  parser.out.println("This is a test");
            try {
                // The syntax for loading a text resource file
                // from a jar file here:
                // http://www.rgagnon.com/javadetails/java-0077.html
                mainPrologue
                    = this.getClass().getClassLoader().getResourceAsStream(
                        "avrH.rtl.s");
                reader = new BufferedReader(new
                    InputStreamReader(mainPrologue));

                String line = null;
                while ((line = reader.readLine()) != null) {
                  parser.out.println(line);
                }
            } catch ( Exception e2) {
                e2.printStackTrace();
            }
            finally{
                try{
                    if(mainPrologue!=null) mainPrologue.close();
                    if(reader!=null) reader.close();
                }
                catch (IOException e) {
                   e.printStackTrace();
                }
            }

          
              CUP$mj$result = parser.getSymbolFactory().newSymbol("NT$1",7, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
 java.io.PrintStream sout
                    = new java.io.PrintStream(
                        new java.io.FileOutputStream(name.lexeme+".java.s"));
                parser.out = new PrintWriter(sout);
                // Check filename is class name, if not exit with error message

              if (!(name.lexeme+".java").equals(parser.programName)){
                	System.out.println(parser.programName);
                	parser.report_fatal_error("Program/Class Name Mismatch",name);
                	System.exit(1);
                }

                //System.exit(0);
            
              CUP$mj$result = parser.getSymbolFactory().newSymbol("NT$0",6, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= IMPORT MEGGY SEMI main_class 
            {
              Object RESULT =null;

              CUP$mj$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		RESULT = start_val;
              CUP$mj$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$mj$parser.done_parsing();
          return CUP$mj$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

