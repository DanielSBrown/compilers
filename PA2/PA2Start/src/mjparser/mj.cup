
package mjparser;
import java_cup.runtime.*;
import java.util.*;
import java.io.PrintWriter;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileNotFoundException;


parser code {:

    public PrintWriter out;

    public String programName;

    public void unrecovered_syntax_error(Symbol cur_SymbolValue) {
        report_fatal_error("Fatal syntax error", cur_SymbolValue);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        done_parsing();
        Symbol SymbolValue = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)SymbolValue.value;
        throw new mjparser.ParseException("Fatal parsing error",
                                          tok.line, tok.pos);
    }

    public void report_error(String message, Object info) {
        Symbol SymbolValue = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)SymbolValue.value;
        System.err.println("[" + tok.line + "," + tok.pos + "] "
                               + message + " at " + tok.toString() );
    }

:}

/* Notice: all terminals declared here */
terminal SymbolValue PLUS, MINUS, TIMES, LPAREN, RPAREN;
terminal SymbolValue LBRACE, RBRACE;
terminal SymbolValue BOOLEAN, INT;
terminal SymbolValue BYTE;
terminal SymbolValue MAIN, IMPORT;
terminal SymbolValue IF, ELSE;
terminal SymbolValue LT;
terminal SymbolValue EQUAL;
terminal SymbolValue AND, NOT;
terminal SymbolValue WHILE;
terminal SymbolValue COMMA, DOT;
terminal SymbolValue NEW, PUBLIC, RETURN, STATIC;
terminal SymbolValue STRING, VOID;
terminal SymbolValue CLASS, EXTENDS;
terminal SymbolValue LBRACKET, RBRACKET;
terminal SymbolValue LENGTH;
terminal SymbolValue SEMI;
terminal SymbolValue ASSIGN;

terminal SymbolValue MEGGY;
terminal SymbolValue MEGGYCOLOR;
terminal SymbolValue MEGGYBUTTON;
terminal SymbolValue MEGGYTONE;
terminal SymbolValue MEGGYSETPIXEL;
terminal SymbolValue MEGGYSETAUXLEDS;
terminal SymbolValue MEGGYTONESTART;
terminal SymbolValue MEGGYDELAY;
terminal SymbolValue MEGGYGETPIXEL;
terminal SymbolValue MEGGYCHECKBUTTON;

terminal SymbolValue INT_LITERAL, ID;
terminal SymbolValue TRUE, FALSE;
terminal SymbolValue COLOR_LITERAL, BUTTON_LITERAL, TONE_LITERAL;
terminal SymbolValue THIS;

/* bogus terminal for unary precedence declaration */
terminal UMINUS;

non terminal program;
non terminal Integer exp;
non terminal statement;
non terminal statement_list;
non terminal main_class;

/* Declare precedence and associativity  here */
precedence left TIMES;
precedence right UMINUS;


/* Meggy Java Grammar */
start with program;

program ::=
    IMPORT MEGGY SEMI main_class
    ;

main_class ::=
        CLASS ID:name
            {: java.io.PrintStream sout
                    = new java.io.PrintStream(
                        new java.io.FileOutputStream(name.lexeme+".java.s"));
                parser.out = new PrintWriter(sout);
                // Check filename is class name, if not exit with error message

              if (!(name.lexeme+".java").equals(parser.programName)){
                	System.out.println(parser.programName);
                	parser.report_fatal_error("Program/Class Name Mismatch",name);
                	System.exit(1);
                }

                //System.exit(0);
            :}
        LBRACE PUBLIC STATIC VOID MAIN
        LPAREN STRING LBRACKET RBRACKET ID:param RPAREN
        LBRACE
          {:
            System.out.println("Generate prolog using avrH.rtl.s");
            InputStream mainPrologue=null;
            BufferedReader reader=null;
          //  parser.out.println("This is a test");
            try {
                // The syntax for loading a text resource file
                // from a jar file here:
                // http://www.rgagnon.com/javadetails/java-0077.html
                mainPrologue
                    = this.getClass().getClassLoader().getResourceAsStream(
                        "avrH.rtl.s");
                reader = new BufferedReader(new
                    InputStreamReader(mainPrologue));

                String line = null;
                while ((line = reader.readLine()) != null) {
                  parser.out.println(line);
                }
            } catch ( Exception e2) {
                e2.printStackTrace();
            }
            finally{
                try{
                    if(mainPrologue!=null) mainPrologue.close();
                    if(reader!=null) reader.close();
                }
                catch (IOException e) {
                   e.printStackTrace();
                }
            }

          :}


        statement_list:list RBRACE
          {:
            //currently prints null, commenting out to not ruin assembly file
          //parser.out.println(list);
          :}

        RBRACE
          {:
            //Epilogue
            System.out.println("Generate epilogue using avrF.rtl.s");
            InputStream mainEpilogue=null;
            BufferedReader reader=null;
          //  parser.out.println("This is a test");
            try {
                // The syntax for loading a text resource file
                // from a jar file here:
                // http://www.rgagnon.com/javadetails/java-0077.html
                mainEpilogue
                    = this.getClass().getClassLoader().getResourceAsStream(
                        "avrF.rtl.s");
                reader = new BufferedReader(new
                    InputStreamReader(mainEpilogue));

                String line = null;
                while ((line = reader.readLine()) != null) {
                  parser.out.println(line);
                }
            } catch ( Exception e2) {
                e2.printStackTrace();
            }
            finally{
                try{
                    if(mainEpilogue!=null) mainEpilogue.close();
                    if(reader!=null) reader.close();
                }
                catch (IOException e) {
                   e.printStackTrace();
                }
            }

            parser.out.flush();
          :}
    ;

    statement ::=
        MEGGYSETPIXEL
        LPAREN
        exp:a
        COMMA
        exp:b
        COMMA
        exp:color
        RPAREN
        SEMI
        {:
          //code assembly printing here
          //parser.out.print("# testflush");
          parser.out.print("\n");
          //@Danny: a and b are not correctly referencing the int value
          //that I tried to set in expression, below this
          parser.out.println("\tldi\t" + "r24,lo8(" + a + ")");
          parser.out.println("\tldi\t" + "r25,hi8(" + a + ")");
          parser.out.println("\tpush\t" + "r25");
          parser.out.println("\tpush\t" + "r24");
          parser.out.print("\n");

          parser.out.println("# casting int1 to byte");
          parser.out.println("\tpop\t" + "r24");
          parser.out.println("\tpop\t" + "r25");
          parser.out.println("\tpush\t" + "r24");
          parser.out.print("\n");

          parser.out.println("\tldi\t" + "r24,lo8(" + b + ")");
          parser.out.println("\tldi\t" + "r25,hi8(" + b + ")");
          parser.out.println("\tpush\t" + "r25");
          parser.out.println("\tpush\t" + "r24");
          parser.out.print("\n");

          parser.out.println("# casting int2 to byte");
          parser.out.println("\tpop\t" + "r24");
          parser.out.println("\tpop\t" + "r25");
          parser.out.println("\tpush\t" + "r24");
          parser.out.print("\n");

          parser.out.println("# color expression meggy.color.COLOR");
          parser.out.println("\tldi\t" + "r22," + color);
          parser.out.println("# Push color expression onto stack");
          parser.out.println("\tpush\t" + "r22");
          parser.out.print("\n");

          parser.out.println("### Meggy.SetPixel(a,b,color) call");
          parser.out.println("# load a one byte expression off stack");
          parser.out.println("\tpop\t" + "r20");
          parser.out.println("\tpop\t" + "r22");
          parser.out.println("\tpop\t" + "r24");
          parser.out.println("\tcall\t" + "_Z6DrawPxhhh");
          parser.out.println("\tcall\t" + "_Z12DisplaySlatev");
          parser.out.print("\n");

        :}
        ;

    exp ::=
        LPAREN
        BYTE
        RPAREN
        exp:e
          {: RESULT = e; :}
        | INT_LITERAL:i
          {: RESULT = i.value; :}
        | COLOR_LITERAL:color
          {: RESULT = color.value; :}
        ;


    statement_list ::=
        statement:s
        | statement_list statement:s
    ;
